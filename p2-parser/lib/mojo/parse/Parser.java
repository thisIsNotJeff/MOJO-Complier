/* Generated By:JavaCC: Do not edit this line. Parser.java */
package mojo.parse;
import java.util.*;
import java.math.BigInteger;
import java.lang.*;
import static mojo.Absyn.*;
public class Parser implements ParserConstants {
private static void usage() {
  throw new java.lang.Error("Usage: java mojo.Parser <source>");
}
public static void main (String[] args) {
  if (args.length != 1) usage();
  java.io.File file = new java.io.File(args[0]);
  try {
    new Parser(file).Unit();
  } catch (java.io.FileNotFoundException e) {
    System.err.println("File not found:" + file.getName());
  } catch (ParseException e) {
    System.err.println(e.getMessage());
  } catch (TokenMgrError e) {
    System.err.println(e.getMessage());
  }
}
public String unitName = "Main";
public Parser(java.io.File file) throws java.io.FileNotFoundException {
  this(new java.io.FileInputStream(file));
  String fileName = file.getName();
  if (fileName.endsWith(".mj"))
    unitName = fileName.substring(0, fileName.lastIndexOf(".mj"));
}

/**************************************************
 * TODO: Complete the grammar, and build AST      *
 **************************************************/
  final public Value.Unit Unit() throws ParseException {
  List<Value> decls = new LinkedList<Value>();
  Value decl = null;
  Stmt.Block block = null;
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      Decls(decls);
    }
    if (jj_2_2(2)) {
      block = Block();
    } else {
      ;
    }
    jj_consume_token(0);
    {if (true) return new Value.Unit(ID(unitName), decls, block);}
    throw new Error("Missing return statement in function");
  }

  final public Stmt.Block Block() throws ParseException {
  Token token;
  List<Value> decls = new LinkedList<Value>();
  List<Stmt> stmts = new LinkedList<Stmt>();
  Value decl;
  Stmt stmt;
    token = jj_consume_token(30);
    label_2:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_2;
      }
      Decls(decls);
    }
    label_3:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_3;
      }
      stmt = Stmts();
                                               stmts.add(stmt);
    }
    jj_consume_token(31);
    {if (true) return new Stmt.Block(token, decls, stmts);}
    throw new Error("Missing return statement in function");
  }

  final public Stmt Stmts() throws ParseException {
  Token tok;
  Stmt.Assign assign;
  Stmt.Break _break;
  Stmt.For _for;
  Stmt.If _if;
  Stmt.Loop loop;
  Stmt.Return _return;
  Stmt.Block block;
  Stmt.Call call;
    if (jj_2_5(2)) {
      assign = Assign();
                         {if (true) return assign;}
    } else if (jj_2_6(2)) {
      call = Call();
                     {if (true) return call;}
    } else if (jj_2_7(2)) {
      _break = Break();
                        {if (true) return _break;}
    } else if (jj_2_8(2)) {
      _for = For();
                    {if (true) return _for;}
    } else if (jj_2_9(2)) {
      _if = If();
                  {if (true) return _if;}
    } else if (jj_2_10(2)) {
      loop = Loop();
                     {if (true) return loop;}
    } else if (jj_2_11(2)) {
      _return = Return();
                          {if (true) return _return;}
    } else if (jj_2_12(2)) {
      block = Block();
                       {if (true) return block;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Stmt.Assign Assign() throws ParseException {
  Token tok;
  Expr lhs;
  Expr rhs;
    lhs = Expr();
    tok = jj_consume_token(50);
    rhs = Expr();
    jj_consume_token(32);
   {if (true) return new Stmt.Assign(tok,lhs,rhs);}
    throw new Error("Missing return statement in function");
  }

  final public Expr.Call exprCall() throws ParseException {
  Expr proc;
  Expr arg;
  Token tok;
  List<Expr> exprs = new LinkedList<Expr>();
    proc = Expr();
    tok = jj_consume_token(39);
    if (jj_2_14(2)) {
      arg = Actual();
                                           exprs.add(arg);
      label_4:
      while (true) {
        if (jj_2_13(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(33);
        arg = Actual();
                                                                                 exprs.add(arg);
      }
    } else {
      ;
    }
    jj_consume_token(40);
   {if (true) return new Expr.Call(tok, proc, exprs);}
    throw new Error("Missing return statement in function");
  }

  final public Stmt.Call Call() throws ParseException {
  Expr.Call exprCall;
  Token tok;
    exprCall = exprCall();
    tok = jj_consume_token(39);
    if (jj_2_16(2)) {
      Actual();
      label_5:
      while (true) {
        if (jj_2_15(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(33);
        Actual();
      }
    } else {
      ;
    }
    jj_consume_token(40);
    jj_consume_token(32);
   {if (true) return new Stmt.Call(tok, exprCall);}
    throw new Error("Missing return statement in function");
  }

  final public Expr Actual() throws ParseException {
// Type type = null;
// Token tok = null;
  Expr e = null;
    e = Expr();
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Stmt.Break Break() throws ParseException {
  Token tok;
    tok = jj_consume_token(7);
    jj_consume_token(32);
   {if (true) return new Stmt.Break(tok);}
    throw new Error("Missing return statement in function");
  }

  final public Stmt.For For() throws ParseException {
  Token tok, id;
  Expr from, to, by = null;
  Stmt stmt = null;
    tok = jj_consume_token(12);
    id = jj_consume_token(ID);
    jj_consume_token(50);
    from = Expr();
    jj_consume_token(46);
    to = Expr();
    if (jj_2_17(2)) {
      jj_consume_token(ID);
      by = Expr();
    } else {
      ;
    }
    stmt = Block();
   {if (true) return new Stmt.For(tok,id,from,to,by,stmt);}
    throw new Error("Missing return statement in function");
  }

  final public Stmt.If If() throws ParseException {
  Expr expr;
  Stmt.Block block, block2;
  Stmt stmt = null;
  List<Stmt.Block> blocks = new LinkedList<Stmt.Block>();
  List<Stmt> stmts = new LinkedList<Stmt>();
  Token tok, tok2;
    tok = jj_consume_token(13);
    expr = Expr();
    block = Block();
    if (jj_2_20(2)) {
      jj_consume_token(10);
      if (jj_2_18(2)) {
        stmt = If();
      } else if (jj_2_19(2)) {
        Block();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
   {if (true) return new Stmt.If(tok, expr, block, stmt);}
    throw new Error("Missing return statement in function");
  }

  final public Stmt.Loop Loop() throws ParseException {
  Stmt.Block block;
  Expr whileExpr = null;
  Expr untilExpr = null;
  Token tok;
    tok = jj_consume_token(14);
    if (jj_2_21(2)) {
      jj_consume_token(24);
      whileExpr = Expr();
    } else {
      ;
    }
    block = Block();
    if (jj_2_22(2)) {
      jj_consume_token(21);
      untilExpr = Expr();
      jj_consume_token(32);
    } else {
      ;
    }
   {if (true) return new Stmt.Loop(tok, whileExpr, block, untilExpr);}
    throw new Error("Missing return statement in function");
  }

  final public Stmt.Return Return() throws ParseException {
  Expr expr = null;
  Token tok;
    tok = jj_consume_token(18);
    if (jj_2_23(2)) {
      expr = Expr();
    } else {
      ;
    }
    jj_consume_token(32);
   {if (true) return new Stmt.Return(tok, expr);}
    throw new Error("Missing return statement in function");
  }

  final public void Decls(List<Value> decls) throws ParseException {
  Token tok;
    if (jj_2_27(2)) {
      tok = jj_consume_token(9);
                   Value.Const Const = null;
      label_6:
      while (true) {
        if (jj_2_24(2)) {
          ;
        } else {
          break label_6;
        }
        Const = ConstDecl();
                                                                    decls.add(Const);
        jj_consume_token(32);
      }
    } else if (jj_2_28(2)) {
      tok = jj_consume_token(20);
                  Value decl = null;
      label_7:
      while (true) {
        if (jj_2_25(2)) {
          ;
        } else {
          break label_7;
        }
        decl = TypeDecl();
                                                          decls.add(decl);
        jj_consume_token(32);
      }
    } else if (jj_2_29(2)) {
      tok = jj_consume_token(23);
      label_8:
      while (true) {
        if (jj_2_26(2)) {
          ;
        } else {
          break label_8;
        }
        VarDecl(decls);
        jj_consume_token(32);
      }
    } else if (jj_2_30(2)) {
      tok = jj_consume_token(ID);
                Value.Procedure pro= null;
      pro = ProcDecl();
                                                              decls.add(pro);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Type.Proc TypeSignature() throws ParseException {
  List<Value.Formal> formals = new LinkedList<Value.Formal>();
  Type type = null;
  Token tok;
    tok = jj_consume_token(39);
    formals = Formals();
    jj_consume_token(40);
    if (jj_2_31(2)) {
      jj_consume_token(41);
      type = Type();
    } else {
      ;
    }
    {if (true) return new Type.Proc(tok, formals, type);}
    throw new Error("Missing return statement in function");
  }

  final public Value.Procedure ProcDecl() throws ParseException {
  Type.Proc sig;
  Stmt.Block block = null;
  Token tok;
    tok = jj_consume_token(ID);
    sig = TypeSignature();
    if (jj_2_32(2)) {
      block = Block();
    } else if (jj_2_33(2)) {
      jj_consume_token(32);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return new Value.Procedure(tok, sig, block);}
    throw new Error("Missing return statement in function");
  }

//Expr.Proc Signature():
//{
//  List<Value.Formal> formals = new LinkedList<Value.Formal>();
//  Type type = null;
//  Token tok;
//}
//{
//  tok = "(" formals = Formals() ")" [":" type = Type()]
//  {return new Expr.Proc(formals, type);}
//}
//////////////////////////////////////////////////////////////////////////////////////////
  final public Type Type() throws ParseException {
  Token tok;
    if (jj_2_34(2)) {
     Type.Named named = null;
      named = Named();
                                                {if (true) return named;}
    } else if (jj_2_35(2)) {
     Type.Record record = null;
      record = TypeRecord();
                                                        {if (true) return record;}
    } else if (jj_2_36(2)) {
     Type.Object object = null;
      object = TypeObject();
                                                        {if (true) return object;}
    } else if (jj_2_37(2)) {
     Type.Array array= null;
      array = TypeArray();
                                                   {if (true) return array;}
    } else if (jj_2_38(2)) {
     Type.Ref ref=null;
      ref = TypeRef();
                                          {if (true) return ref;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Type.Named Named() throws ParseException {
  Token tok;
    tok = jj_consume_token(ID);
   {if (true) return new Type.Named(tok);}
    throw new Error("Missing return statement in function");
  }

//Type.Object TypeObject():
//{
//  Token tok = null;
//  List<Value.Field> fields = new LinkedList<Value.Field>();
//  List<Value.Method> methods = new LinkedList<Value.Method>();
//  List<Value.Method> overrides = new LinkedList<Value.Method>();
//}
//{
//  LOOKAHEAD((tok = <ID> | tok=TypeObject())?) <ID> "{" Members() "}"
//  {return new Type.Object(tok,null,fields,methods,overrides);}
//}
  final public Type.Object TypeObject() throws ParseException {
  Token tok = null;
  List<Value.Field> fields = new LinkedList<Value.Field>();
  List<Value.Method> methods = new LinkedList<Value.Method>();
  List<Value.Method> overrides = new LinkedList<Value.Method>();
    if (jj_2_41(2)) {
      if (jj_2_39(2)) {
        tok = jj_consume_token(ID);
      } else if (jj_2_40(2)) {
        tok = jj_consume_token(ID);
        B(fields, methods, overrides);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    jj_consume_token(ID);
    jj_consume_token(30);
    Members(fields, methods, overrides);
    jj_consume_token(31);
    {if (true) return new Type.Object(tok,null,fields,methods,overrides);}
    throw new Error("Missing return statement in function");
  }

  final public void B(List<Value.Field> fields, List<Value.Method> methods, List<Value.Method> overrides) throws ParseException {
  Token tok;
  List<List<Value>> list;
    if (jj_2_42(2)) {
      tok = jj_consume_token(ID);
      jj_consume_token(30);
      Members(fields, methods, overrides);
      jj_consume_token(31);
      B(fields, methods, overrides);
    } else {
      ;
    }
   {if (true) return;}
  }

//List<Value> Members():
//{
//  Value member;
//  List<Value> members = new LinkedList<Value>();
//}
//{
//  [member = Member() {members.add(member);} (";" member = Member() {members.add(member);})* [";"]]
//  {return members;}
//}
  final public void Members(List<Value.Field> fields, List<Value.Method> methods, List<Value.Method> overrides) throws ParseException {
  Value member;
    if (jj_2_45(2)) {
      member = Member();
                      addMember(member,fields,methods,overrides);
      label_9:
      while (true) {
        if (jj_2_43(2)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(32);
        member = Member();
                          addMember(member,fields,methods,overrides);
      }
      if (jj_2_44(2)) {
        jj_consume_token(32);
      } else {
        ;
      }
    } else {
      ;
    }
    {if (true) return;}
  }

  final public Value Member() throws ParseException {
 Token tok = null;
    if (jj_2_46(2)) {
     Value.Field field = null;
      field = Field();
                                                 {if (true) return field;}
    } else if (jj_2_47(2)) {
     Value.Method method = null;
      method = Method();
                                                     {if (true) return method;}
    } else if (jj_2_48(2)) {
     Expr expr = null;
      tok = jj_consume_token(ID);
      jj_consume_token(50);
      expr = Expr();
                                                       {if (true) return new Value.Method(tok, null, null,expr);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Type.Ref TypeRef() throws ParseException {
  Type type;
  Token tok;
    tok = jj_consume_token(52);
    type = Type();
   {if (true) return new Type.Ref(tok, type);}
    throw new Error("Missing return statement in function");
  }

  final public Type.Array TypeArray() throws ParseException {
  Expr expr = null;
  Type type;
  Token token;
    token = jj_consume_token(48);
    if (jj_2_49(2)) {
      expr = Expr();
    } else {
      ;
    }
    jj_consume_token(49);
    type = Type();
   {if (true) return new Type.Array(token,expr,type);}
    throw new Error("Missing return statement in function");
  }

  final public Type.Record TypeRecord() throws ParseException {
  List<Value.Field> fields = new LinkedList<Value.Field>();
  Token tok;
    tok = jj_consume_token(39);
    fields = Fields();
    jj_consume_token(40);
   {if (true) return new Type.Record(tok, fields);}
    throw new Error("Missing return statement in function");
  }

  final public Value.Method Method() throws ParseException {
  Token tok;
  Type.Object parent;
  Type.Proc sig;
  Expr expr = null;
    tok = jj_consume_token(ID);
    sig = TypeSignature();
    if (jj_2_50(2)) {
      jj_consume_token(50);
      expr = Expr();
    } else {
      ;
    }
   {if (true) return new Value.Method(tok, null, sig, expr);}
    throw new Error("Missing return statement in function");
  }

  final public List<Value.Field> Fields() throws ParseException {
  List<Value.Field> fields = new LinkedList<Value.Field>();
  Value.Field field;
    if (jj_2_53(2)) {
      field = Field();
                    fields.add(field);
      label_10:
      while (true) {
        if (jj_2_51(2)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(32);
        field = Field();
                                                              fields.add(field);
      }
      if (jj_2_52(2)) {
        jj_consume_token(32);
      } else {
        ;
      }
    } else {
      ;
    }
    {if (true) return fields;}
    throw new Error("Missing return statement in function");
  }

  final public Value.Field Field() throws ParseException {
  Type type;
  Token tok;
    tok = jj_consume_token(ID);
    label_11:
    while (true) {
      if (jj_2_54(2)) {
        ;
      } else {
        break label_11;
      }
      jj_consume_token(33);
      jj_consume_token(ID);
    }
    jj_consume_token(41);
    type = Type();
   {if (true) return new Value.Field(tok, null, type);}
    throw new Error("Missing return statement in function");
  }

  final public void Formal(List<Value.Formal> formals) throws ParseException {
  Type type = null;
  Token tok, tok2 = null;
  Value.Formal.Mode mode = null;
  List<Token> idlist = new LinkedList<Token>();
    if (jj_2_57(2)) {
      if (jj_2_55(2)) {
        tok = jj_consume_token(22);
                mode = Value.Formal.Mode.VALUE;
      } else if (jj_2_56(2)) {
        tok = jj_consume_token(23);
                                                                mode = Value.Formal.Mode.VAR;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    tok = jj_consume_token(ID);
               idlist.add(tok);
    label_12:
    while (true) {
      if (jj_2_58(2)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(33);
      tok = jj_consume_token(ID);
                                                  idlist.add(tok);
    }
    jj_consume_token(41);
    type = Type();
    if (mode == null) {
        mode = Value.Formal.Mode.VALUE;
    }
    for (Token t : idlist) {
        formals.add(new Value.Formal(t, mode, type));
    }
  }

  final public List<Value.Formal> Formals() throws ParseException {
  Value.Formal formal;
  List<Value.Formal> formals = new LinkedList<Value.Formal>();
    if (jj_2_61(2)) {
      Formal(formals);
      label_13:
      while (true) {
        if (jj_2_59(2)) {
          ;
        } else {
          break label_13;
        }
        jj_consume_token(32);
        Formal(formals);
      }
      if (jj_2_60(2)) {
        jj_consume_token(32);
      } else {
        ;
      }
    } else {
      ;
    }
   {if (true) return formals;}
    throw new Error("Missing return statement in function");
  }

  final public void VarDecl(List<Value> decls) throws ParseException {
  Type type;
  Expr expr;
  Token tok;
  List<Token> idlist = new LinkedList<Token>();
    tok = jj_consume_token(ID);
              idlist.add(tok);
    label_14:
    while (true) {
      if (jj_2_62(2)) {
        ;
      } else {
        break label_14;
      }
      jj_consume_token(33);
      tok = jj_consume_token(ID);
                                                 idlist.add(tok);
    }
    jj_consume_token(41);
    type = Type();
    jj_consume_token(50);
    expr = Expr();
    for (Token t : idlist) {
        decls.add(new Value.Variable(t, type, expr));
    }
  }

  final public Value.Tipe TypeDecl() throws ParseException {
  Type type;
  Token tok;
    tok = jj_consume_token(ID);
    jj_consume_token(51);
    type = Type();
   {if (true) return new Value.Tipe(tok, type);}
    throw new Error("Missing return statement in function");
  }

  final public Value.Const ConstDecl() throws ParseException {
  Type type = null;
  Expr expr = null;
  Token tok = null;
    tok = jj_consume_token(ID);
    if (jj_2_63(2)) {
      jj_consume_token(41);
      type = Type();
    } else {
      ;
    }
    jj_consume_token(51);
    expr = Expr();
   {if (true) return new Value.Const(tok, type, expr);}
    throw new Error("Missing return statement in function");
  }

  final public Expr Expr() throws ParseException {
  Token tok;
  Expr lhs, rhs;
    lhs = E1();
    label_15:
    while (true) {
      if (jj_2_64(2)) {
        ;
      } else {
        break label_15;
      }
      tok = jj_consume_token(25);
      rhs = E1();
                                     lhs = new Expr.Or(tok, lhs, rhs);
    }
   {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expr E1() throws ParseException {
  Expr lhs, rhs;
  Token tok;
    lhs = E2();
    label_16:
    while (true) {
      if (jj_2_65(2)) {
        ;
      } else {
        break label_16;
      }
      tok = jj_consume_token(34);
      rhs = E2();
                               lhs = new Expr.And(tok, lhs, rhs);
    }
   {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expr E2() throws ParseException {
  Expr e3;
  Token tok = null;
  List<Token> tokens = new LinkedList<Token>();
    label_17:
    while (true) {
      if (jj_2_66(2)) {
        ;
      } else {
        break label_17;
      }
      tok = jj_consume_token(44);
              tokens.add(tok);
    }
    e3 = E3();
    if (tokens.size() == 0) {if (true) return e3;}
    else{
        Expr finalE2 = e3;
        for (int i = tokens.size(); i-- > 0;) {
            Token s = tokens.get(i);
            finalE2 = new Expr.Not(s,finalE2);
        }
        {if (true) return finalE2;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Expr E3() throws ParseException {
  Expr lhs, rhs;
  Token tok;
    lhs = E4();
    label_18:
    while (true) {
      if (jj_2_67(2)) {
        ;
      } else {
        break label_18;
      }
      if (jj_2_68(2)) {
        tok = jj_consume_token(43);
        rhs = E4();
                                 lhs = new Expr.Equal(tok,lhs,rhs,Expr.Equal.Op.EQ);
      } else if (jj_2_69(2)) {
        tok = jj_consume_token(45);
        rhs = E4();
                                 lhs = new Expr.Equal(tok,lhs,rhs,Expr.Equal.Op.NE);
      } else if (jj_2_70(2)) {
        tok = jj_consume_token(26);
        rhs = E4();
                                 lhs = new Expr.Compare(tok,lhs,rhs,Expr.Compare.Op.LT);
      } else if (jj_2_71(2)) {
        tok = jj_consume_token(27);
        rhs = E4();
                                 lhs = new Expr.Compare(tok,lhs,rhs,Expr.Compare.Op.LE);
      } else if (jj_2_72(2)) {
        tok = jj_consume_token(35);
        rhs = E4();
                                 lhs = new Expr.Compare(tok,lhs,rhs,Expr.Compare.Op.GT);
      } else if (jj_2_73(2)) {
        tok = jj_consume_token(36);
        rhs = E4();
                                 lhs = new Expr.Compare(tok,lhs,rhs,Expr.Compare.Op.GE);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expr E4() throws ParseException {
  Expr lhs,rhs;
  Token tok;
    lhs = E5();
    label_19:
    while (true) {
      if (jj_2_74(2)) {
        ;
      } else {
        break label_19;
      }
      if (jj_2_75(2)) {
        tok = jj_consume_token(28);
        rhs = E5();
                                   lhs = new Expr.Add(tok,lhs,rhs);
      } else if (jj_2_76(2)) {
        tok = jj_consume_token(29);
        rhs = E5();
                                lhs = new Expr.Sub(tok,lhs,rhs);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expr E5() throws ParseException {
  Expr lhs, rhs = null;
  Token tok;
    lhs = E6();
    label_20:
    while (true) {
      if (jj_2_77(2)) {
        ;
      } else {
        break label_20;
      }
      if (jj_2_78(2)) {
        tok = jj_consume_token(37);
        rhs = E6();
                                lhs = new Expr.Mul(tok,lhs,rhs);
      } else if (jj_2_79(2)) {
        tok = jj_consume_token(38);
        rhs = E6();
                               lhs = new Expr.Div(tok,lhs,rhs);
      } else if (jj_2_80(2)) {
        tok = jj_consume_token(47);
        rhs = E6();
                               lhs = new Expr.Mod(tok,lhs,rhs);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////
  final public Expr E6() throws ParseException {
  Expr e, e7 = null;
  Token tok = null;
  List<Token> signs = new LinkedList<Token>();
    label_21:
    while (true) {
      if (jj_2_81(2)) {
        ;
      } else {
        break label_21;
      }
      if (jj_2_82(2)) {
        tok = jj_consume_token(28);
               signs.add(tok);
      } else if (jj_2_83(2)) {
        tok = jj_consume_token(29);
               signs.add(tok);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    e7 = E7();
    if (signs.size() == 0) {if (true) return e7;}
    else{
        Expr finalE6 = e7;
        for (int i = signs.size(); i-- > 0;) {
            Token s = signs.get(i);
            if (s.image.equals("-")) {
                finalE6 = new Expr.Neg(s,finalE6);
            } else {
                finalE6 = new Expr.Pos(s,finalE6);
            }
        }
        {if (true) return finalE6;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Expr E7() throws ParseException {
  Expr e8;
  Token tok;
  Token name;
  Expr index;
  List<Expr> args = new LinkedList<Expr>();
    e8 = E8();
    label_22:
    while (true) {
      if (jj_2_84(2)) {
        ;
      } else {
        break label_22;
      }
      if (jj_2_87(2)) {
        tok = jj_consume_token(52);
                      e8 = new Expr.Deref(tok, e8);
      } else if (jj_2_88(2)) {
        tok = jj_consume_token(42);
        name = jj_consume_token(ID);
                                   e8 = new Expr.Qualify(tok, e8, name);
      } else if (jj_2_89(2)) {
        tok = jj_consume_token(48);
        index = Expr();
        jj_consume_token(49);
                                          e8 = new Expr.Subscript(tok, e8, index);
      } else if (jj_2_90(2)) {
        tok = jj_consume_token(39);
        if (jj_2_86(2)) {
          index = Actual();
                                         args.add(index);
          label_23:
          while (true) {
            if (jj_2_85(2)) {
              ;
            } else {
              break label_23;
            }
            jj_consume_token(33);
            index = Actual();
                                                                                  args.add(index);
          }
        } else {
          ;
        }
        jj_consume_token(40);
                                                                                                            e8 = new Expr.Call(tok,e8, args);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
           {if (true) return e8;}
    throw new Error("Missing return statement in function");
  }

  final public Expr E8() throws ParseException {
  Token tok;
  Expr expr;
    if (jj_2_91(2)) {
      tok = jj_consume_token(ID);
               {if (true) return new Expr.Named(tok);}
    } else if (jj_2_92(2)) {
      tok = jj_consume_token(NUMBER);
                    int index;
                    if ((index = tok.image.indexOf('_')) != -1) {
                        int base = Integer.parseInt(tok.image.substring(0,index));
                        String number = tok.image.substring(index+1);
                        {if (true) return new Expr.Int(tok, new BigInteger(number, base));}
                    }
                    {if (true) return new Expr.Int(tok, new BigInteger(tok.image,10));}
    } else if (jj_2_93(2)) {
      tok = jj_consume_token(CHAR);
                 {if (true) return new Expr.Int(tok, BigInteger.valueOf(tok.image.charAt(1)));}
    } else if (jj_2_94(2)) {
      tok = jj_consume_token(TEXT);
                 {if (true) return new Expr.Text(tok, tok.image);}
    } else if (jj_2_95(2)) {
      tok = jj_consume_token(39);
      expr = Expr();
      jj_consume_token(40);
                                {if (true) return expr;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_3_38() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_62()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(30)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(21)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_scan_token(39)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_94() {
    if (jj_scan_token(TEXT)) return true;
    return false;
  }

  private boolean jj_3_93() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_91()) {
    jj_scanpos = xsp;
    if (jj_3_92()) {
    jj_scanpos = xsp;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3_95()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_91() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_scan_token(39)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_86()) jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_scan_token(42)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(22)) return true;
    return false;
  }

  private boolean jj_3_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) return true;
    }
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_58()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) {
    jj_scanpos = xsp;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(50)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_84()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_54()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(23)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(20)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(9)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(10)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(24)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(18)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_scan_token(29)) return true;
    return false;
  }

  private boolean jj_3_82() {
    if (jj_scan_token(28)) return true;
    return false;
  }

  private boolean jj_3_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_82()) {
    jj_scanpos = xsp;
    if (jj_3_83()) return true;
    }
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_81()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(14)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_scan_token(47)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_scan_token(38)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_scan_token(37)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(39)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(40)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_76() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_scan_token(28)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(48)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(13)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(33)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_73() {
    if (jj_scan_token(36)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_scan_token(35)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(33)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_scan_token(27)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(26)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(52)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_scan_token(45)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(12)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(7)) return true;
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_66()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_scan_token(34)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_scan_token(25)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_65()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(39)) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_63()) jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_scan_token(33)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(23)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_24()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[95];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 95; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
