PROCEDURE LocalArrayOpen
# Before canonicalization (trees):
MOVE(
 TEMP LocalArrayOpen.1.x,
 ESEQ(
  MOVE(
   TEMP t.0,
   CONST 10),
  BLT(
   TEMP t.0,
   CONST 0,
   L.0, L.1),
  LABEL L.1,
  MOVE(
   TEMP t.1,
   TEMP t.0),
  MOVE(
   TEMP t.2,
   CONST 16),
  MOVE(
   TEMP t.2,
   ADD(
    TEMP t.2,
    MUL(
     TEMP t.1,
     CONST 8))),
  MOVE(
   TEMP t.3,
   CALL(
    NAME malloc,
    CONST 0,
    TEMP t.2)),
  MOVE(
   MEM(
    TEMP t.3, 
    CONST 0, 8),
   ADD(
    TEMP t.3,
    CONST 16)),
  MOVE(
   MEM(
    TEMP t.3, 
    CONST 8, 8),
   TEMP t.0),
  MOVE(
   TEMP t.5,
   MEM(
    TEMP t.3, 
    CONST 8, 8)),
  MOVE(
   TEMP t.6,
   MEM(
    TEMP t.3, 
    CONST 0, 8)),
  MOVE(
   TEMP t.4,
   CONST 0),
  BGE(
   TEMP t.4,
   TEMP t.5,
   L.4, L.2),
  LABEL L.2,
  MOVE(
   MEM(
    ADD(
     TEMP t.6,
     MUL(
      TEMP t.4,
      CONST 8)), 
    CONST 0, 8),
   CONST 0),
  MOVE(
   TEMP t.4,
   ADD(
    TEMP t.4,
    CONST 1)),
  LABEL L.3,
  BLT(
   TEMP t.4,
   TEMP t.5,
   L.2, L.4),
  LABEL L.4,
  TEMP t.3))
# After canonicalization (trees):
MOVE(
 TEMP t.0,
 CONST 10)
BLT(
 TEMP t.0,
 CONST 0,
 L.0, L.1)
LABEL L.1
MOVE(
 TEMP t.1,
 TEMP t.0)
MOVE(
 TEMP t.2,
 CONST 16)
MOVE(
 TEMP t.2,
 ADD(
  TEMP t.2,
  MUL(
   TEMP t.1,
   CONST 8)))
MOVE(
 TEMP t.3,
 CALL(
  NAME malloc,
  CONST 0,
  TEMP t.2))
MOVE(
 MEM(
  TEMP t.3, 
  CONST 0, 8),
 ADD(
  TEMP t.3,
  CONST 16))
MOVE(
 MEM(
  TEMP t.3, 
  CONST 8, 8),
 TEMP t.0)
MOVE(
 TEMP t.5,
 MEM(
  TEMP t.3, 
  CONST 8, 8))
MOVE(
 TEMP t.6,
 MEM(
  TEMP t.3, 
  CONST 0, 8))
MOVE(
 TEMP t.4,
 CONST 0)
BGE(
 TEMP t.4,
 TEMP t.5,
 L.4, L.2)
LABEL L.2
MOVE(
 MEM(
  ADD(
   TEMP t.6,
   MUL(
    TEMP t.4,
    CONST 8)), 
  CONST 0, 8),
 CONST 0)
MOVE(
 TEMP t.4,
 ADD(
  TEMP t.4,
  CONST 1))
LABEL L.3
BLT(
 TEMP t.4,
 TEMP t.5,
 L.2, L.4)
LABEL L.4
MOVE(
 TEMP LocalArrayOpen.1.x,
 TEMP t.3)
# Basic Blocks:
LABEL L.7
MOVE(
 TEMP t.0,
 CONST 10)
BLT(
 TEMP t.0,
 CONST 0,
 L.0, L.1)
LABEL L.1
MOVE(
 TEMP t.1,
 TEMP t.0)
MOVE(
 TEMP t.2,
 CONST 16)
MOVE(
 TEMP t.2,
 ADD(
  TEMP t.2,
  MUL(
   TEMP t.1,
   CONST 8)))
MOVE(
 TEMP t.3,
 CALL(
  NAME malloc,
  CONST 0,
  TEMP t.2))
MOVE(
 MEM(
  TEMP t.3, 
  CONST 0, 8),
 ADD(
  TEMP t.3,
  CONST 16))
MOVE(
 MEM(
  TEMP t.3, 
  CONST 8, 8),
 TEMP t.0)
MOVE(
 TEMP t.5,
 MEM(
  TEMP t.3, 
  CONST 8, 8))
MOVE(
 TEMP t.6,
 MEM(
  TEMP t.3, 
  CONST 0, 8))
MOVE(
 TEMP t.4,
 CONST 0)
BGE(
 TEMP t.4,
 TEMP t.5,
 L.4, L.2)
LABEL L.2
MOVE(
 MEM(
  ADD(
   TEMP t.6,
   MUL(
    TEMP t.4,
    CONST 8)), 
  CONST 0, 8),
 CONST 0)
MOVE(
 TEMP t.4,
 ADD(
  TEMP t.4,
  CONST 1))
JUMP(
 NAME L.3)
LABEL L.3
BLT(
 TEMP t.4,
 TEMP t.5,
 L.2, L.4)
LABEL L.4
MOVE(
 TEMP LocalArrayOpen.1.x,
 TEMP t.3)
# Trace Scheduled:
LABEL L.7
MOVE(
 TEMP t.0,
 CONST 10)
BLT(
 TEMP t.0,
 CONST 0,
 L.0, L.1)
LABEL L.1
MOVE(
 TEMP t.1,
 TEMP t.0)
MOVE(
 TEMP t.2,
 CONST 16)
MOVE(
 TEMP t.2,
 ADD(
  TEMP t.2,
  MUL(
   TEMP t.1,
   CONST 8)))
MOVE(
 TEMP t.3,
 CALL(
  NAME malloc,
  CONST 0,
  TEMP t.2))
MOVE(
 MEM(
  TEMP t.3, 
  CONST 0, 8),
 ADD(
  TEMP t.3,
  CONST 16))
MOVE(
 MEM(
  TEMP t.3, 
  CONST 8, 8),
 TEMP t.0)
MOVE(
 TEMP t.5,
 MEM(
  TEMP t.3, 
  CONST 8, 8))
MOVE(
 TEMP t.6,
 MEM(
  TEMP t.3, 
  CONST 0, 8))
MOVE(
 TEMP t.4,
 CONST 0)
BGE(
 TEMP t.4,
 TEMP t.5,
 L.4, L.2)
LABEL L.2
MOVE(
 MEM(
  ADD(
   TEMP t.6,
   MUL(
    TEMP t.4,
    CONST 8)), 
  CONST 0, 8),
 CONST 0)
MOVE(
 TEMP t.4,
 ADD(
  TEMP t.4,
  CONST 1))
LABEL L.3
BLT(
 TEMP t.4,
 TEMP t.5,
 L.2, L.4)
LABEL L.4
MOVE(
 TEMP LocalArrayOpen.1.x,
 TEMP t.3)
# With procedure entry/exit:
LABEL L.7
MOVE(
 TEMP t.0,
 CONST 10)
BLT(
 TEMP t.0,
 CONST 0,
 L.0, L.1)
LABEL L.1
MOVE(
 TEMP t.1,
 TEMP t.0)
MOVE(
 TEMP t.2,
 CONST 16)
MOVE(
 TEMP t.2,
 ADD(
  TEMP t.2,
  MUL(
   TEMP t.1,
   CONST 8)))
MOVE(
 TEMP t.3,
 CALL(
  NAME malloc,
  CONST 0,
  TEMP t.2))
MOVE(
 MEM(
  TEMP t.3, 
  CONST 0, 8),
 ADD(
  TEMP t.3,
  CONST 16))
MOVE(
 MEM(
  TEMP t.3, 
  CONST 8, 8),
 TEMP t.0)
MOVE(
 TEMP t.5,
 MEM(
  TEMP t.3, 
  CONST 8, 8))
MOVE(
 TEMP t.6,
 MEM(
  TEMP t.3, 
  CONST 0, 8))
MOVE(
 TEMP t.4,
 CONST 0)
BGE(
 TEMP t.4,
 TEMP t.5,
 L.4, L.2)
LABEL L.2
MOVE(
 MEM(
  ADD(
   TEMP t.6,
   MUL(
    TEMP t.4,
    CONST 8)), 
  CONST 0, 8),
 CONST 0)
MOVE(
 TEMP t.4,
 ADD(
  TEMP t.4,
  CONST 1))
LABEL L.3
BLT(
 TEMP t.4,
 TEMP t.5,
 L.2, L.4)
LABEL L.4
MOVE(
 TEMP LocalArrayOpen.1.x,
 TEMP t.3)
# Instructions:
L.7:	# <- 
	movq $10,t.0	# t.0 <- 
	xorq t.7,t.7	# t.7 <- 
	cmpq t.7,t.0	# <- t.0 t.7 
	jl L.0	# <- : goto L.0 L.1 
L.1:	# <- 
	movq t.0,t.1	# t.1 := t.0 
	movq $16,t.2	# t.2 <- 
	movq t.2,t.8	# t.8 := t.2 
	movq t.1,t.9	# t.9 := t.1 
	shlq $3,t.9	# t.9 <- t.9 
	addq t.9,t.8	# t.8 <- t.9 t.8 
	movq t.8,t.2	# t.2 := t.8 
	movq t.2,%rdi	# %rdi := t.2 
	call malloc	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.3	# t.3 := %rax 
	movq t.3,t.10	# t.10 := t.3 
	addq $16,t.10	# t.10 <- t.10 
	movq t.10,0(t.3)	# <- t.10 t.3 
	movq t.0,8(t.3)	# <- t.0 t.3 
	movq 8(t.3),t.11	# t.11 <- t.3 
	movq t.11,t.5	# t.5 := t.11 
	movq 0(t.3),t.12	# t.12 <- t.3 
	movq t.12,t.6	# t.6 := t.12 
	xorq t.4,t.4	# t.4 <- 
	cmpq t.5,t.4	# <- t.4 t.5 
	jge L.4	# <- : goto L.4 L.2 
L.2:	# <- 
	movq t.6,t.13	# t.13 := t.6 
	movq t.4,t.14	# t.14 := t.4 
	shlq $3,t.14	# t.14 <- t.14 
	addq t.14,t.13	# t.13 <- t.14 t.13 
	movq $0,0(t.13)	# <- t.13 
	movq t.4,t.15	# t.15 := t.4 
	addq $1,t.15	# t.15 <- t.15 
	movq t.15,t.4	# t.4 := t.15 
L.3:	# <- 
	cmpq t.5,t.4	# <- t.4 t.5 
	jl L.2	# <- : goto L.2 L.4 
L.4:	# <- 
	movq t.3,LocalArrayOpen.1.x	# LocalArrayOpen.1.x := t.3 
# Control Flow Graph:
0: t.0 t.7 <- ; goto 1 
1: t.1 t.2 t.8 t.9 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.3 t.10 t.11 t.5 t.12 t.6 t.4 <- t.0 ; goto 4 2 
2: t.13 t.14 t.15 t.4 <- t.6 t.4 ; goto 3 
3: <- t.4 t.5 ; goto 2 4 
4: LocalArrayOpen.1.x <- t.3 %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.0: t.7 %rsp %rbp t.10 t.3 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.2 t.8 t.9 
t.7: t.0 %rsp %rbp 
t.1: t.8 t.2 %rsp %rbp 
t.2: %rsp %rbp t.0 t.1 
t.8: %rsp %rbp t.0 t.9 t.1 
t.9: %rsp %rbp t.0 t.8 
t.3: t.4 t.6 t.12 t.5 t.11 t.10 %rsp %rbp t.0 t.15 t.13 t.14 
t.10: t.3 %rsp %rbp t.0 
t.11: t.3 %rsp %rbp 
t.5: t.4 t.6 t.12 t.3 %rsp %rbp t.15 t.13 t.14 
t.12: t.3 %rsp %rbp t.5 
t.6: t.4 t.3 %rsp %rbp t.5 t.15 t.13 t.14 
t.4: t.3 %rsp %rbp t.6 t.5 t.13 t.14 
t.13: t.5 t.6 t.3 %rsp %rbp t.4 t.14 
t.14: t.5 t.6 t.3 %rsp %rbp t.4 t.13 
t.15: t.5 t.6 t.3 %rsp %rbp 
LocalArrayOpen.1.x: %rsp %rbp 
LocalArrayOpen.1.x <= t.3
t.13 <= t.6
t.14 <= t.4
t.15 <= t.4
t.4 <= t.15
t.1 <= t.0
t.8 <= t.2
t.9 <= t.1
t.2 <= t.8
%rdi <= t.2
t.3 <= %rax
t.10 <= t.3
t.5 <= t.11
t.6 <= t.12
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.0->%r12
t.7->%rax
t.1->%rax
t.2->%rbx
t.8->%rbx
t.9->%rax
t.3->%rsi
t.10->%rax
t.11->%rax
t.5->%rdi
t.12->%rax
t.6->%rax
t.4->%rbx
t.13->%rcx
t.14->%rdx
t.15->%rbx
LocalArrayOpen.1.x->%rax
# Assembly code:
	.text
LocalArrayOpen:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %r12, -16(%rbp)
	movq %rbx, -8(%rbp)
L.7:
	movq $10,%r12
	xorq %rax,%rax
	cmpq %rax,%r12
	jl L.0
L.1:
	movq %r12,%rax
	movq $16,%rbx
#	movq %rbx,%rbx
#	movq %rax,%rax
	shlq $3,%rax
	addq %rax,%rbx
#	movq %rbx,%rbx
	movq %rbx,%rdi
	call malloc
	movq %rax,%rsi
	movq %rsi,%rax
	addq $16,%rax
	movq %rax,0(%rsi)
	movq %r12,8(%rsi)
	movq 8(%rsi),%rax
	movq %rax,%rdi
	movq 0(%rsi),%rax
#	movq %rax,%rax
	xorq %rbx,%rbx
	cmpq %rdi,%rbx
	jge L.4
L.2:
	movq %rax,%rcx
	movq %rbx,%rdx
	shlq $3,%rdx
	addq %rdx,%rcx
	movq $0,0(%rcx)
#	movq %rbx,%rbx
	addq $1,%rbx
#	movq %rbx,%rbx
L.3:
	cmpq %rdi,%rbx
	jl L.2
L.4:
	movq %rsi,%rax
#	returnSink
	movq -8(%rbp),%rbx
	movq -16(%rbp),%r12
	addq $16,%rsp
	popq %rbp
	ret
L.0:
	call badSub
END LocalArrayOpen
PROCEDURE main
# Before canonicalization (trees):
EXP(
 CALL(
  NAME LocalArrayOpen,
  CONST 0))
# After canonicalization (trees):
EXP(
 CALL(
  NAME LocalArrayOpen,
  CONST 0))
# Basic Blocks:
LABEL L.8
EXP(
 CALL(
  NAME LocalArrayOpen,
  CONST 0))
# Trace Scheduled:
LABEL L.8
EXP(
 CALL(
  NAME LocalArrayOpen,
  CONST 0))
# With procedure entry/exit:
LABEL L.8
EXP(
 CALL(
  NAME LocalArrayOpen,
  CONST 0))
# Instructions:
L.8:	# <- 
	call LocalArrayOpen	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- 
# Control Flow Graph:
0: %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.globl main
	.text
main:
	pushq %rbp
	movq %rsp,%rbp
L.8:
	call LocalArrayOpen
#	returnSink
	popq %rbp
	ret
END main
	.data
	.balign 8
L.5:	.asciz	"Attempt to use a null pointer"
PROCEDURE badPtr
# Before canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.5)),
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# After canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.5))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Basic Blocks:
LABEL L.9
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.5))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Trace Scheduled:
LABEL L.9
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.5))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# With procedure entry/exit:
LABEL L.9
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.5))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Instructions:
L.9:	# <- 
	leaq L.5(%rip),t.16	# t.16 <- 
	movq t.16,%rdi	# %rdi := t.16 
	call puts	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $1,t.17	# t.17 <- 
	movq t.17,%rdi	# %rdi := t.17 
	call exit	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
# Control Flow Graph:
0: t.16 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.17 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.16: %rsp %rbp 
t.17: %rsp %rbp 
%rdi <= t.16
%rdi <= t.17
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.16->%rax
t.17->%rax
# Assembly code:
	.text
badPtr:
	pushq %rbp
	movq %rsp,%rbp
L.9:
	leaq L.5(%rip),%rax
	movq %rax,%rdi
	call puts
	movabsq $1,%rax
	movq %rax,%rdi
	call exit
#	returnSink
	popq %rbp
	ret
END badPtr
	.data
	.balign 8
L.6:	.asciz	"Subscript out of bounds"
PROCEDURE badSub
# Before canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.6)),
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# After canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.6))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Basic Blocks:
LABEL L.10
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.6))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Trace Scheduled:
LABEL L.10
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.6))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# With procedure entry/exit:
LABEL L.10
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.6))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Instructions:
L.10:	# <- 
	leaq L.6(%rip),t.18	# t.18 <- 
	movq t.18,%rdi	# %rdi := t.18 
	call puts	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $1,t.19	# t.19 <- 
	movq t.19,%rdi	# %rdi := t.19 
	call exit	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
# Control Flow Graph:
0: t.18 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.19 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.18: %rsp %rbp 
t.19: %rsp %rbp 
%rdi <= t.18
%rdi <= t.19
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.18->%rax
t.19->%rax
# Assembly code:
	.text
badSub:
	pushq %rbp
	movq %rsp,%rbp
L.10:
	leaq L.6(%rip),%rax
	movq %rax,%rdi
	call puts
	movabsq $1,%rax
	movq %rax,%rdi
	call exit
#	returnSink
	popq %rbp
	ret
END badSub
