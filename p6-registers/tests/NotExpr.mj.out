PROCEDURE NotExpr.Not
# Before canonicalization (trees):
MOVE(
 TEMP %rax,
 ESEQ(
  MOVE(
   TEMP t.0,
   CONST 0),
  BEQ(
   TEMP NotExpr.Not.x,
   CONST 0,
   L.1, L.2),
  LABEL L.1,
  MOVE(
   TEMP t.0,
   CONST 1),
  LABEL L.2,
  TEMP t.0)),
JUMP(
 NAME L.0),
LABEL L.0
# After canonicalization (trees):
MOVE(
 TEMP t.0,
 CONST 0)
BEQ(
 TEMP NotExpr.Not.x,
 CONST 0,
 L.1, L.2)
LABEL L.1
MOVE(
 TEMP t.0,
 CONST 1)
LABEL L.2
MOVE(
 TEMP %rax,
 TEMP t.0)
JUMP(
 NAME L.0)
LABEL L.0
# Basic Blocks:
LABEL L.5
MOVE(
 TEMP t.0,
 CONST 0)
BEQ(
 TEMP NotExpr.Not.x,
 CONST 0,
 L.1, L.2)
LABEL L.1
MOVE(
 TEMP t.0,
 CONST 1)
JUMP(
 NAME L.2)
LABEL L.2
MOVE(
 TEMP %rax,
 TEMP t.0)
JUMP(
 NAME L.0)
LABEL L.0
# Trace Scheduled:
LABEL L.5
MOVE(
 TEMP t.0,
 CONST 0)
BEQ(
 TEMP NotExpr.Not.x,
 CONST 0,
 L.1, L.2)
LABEL L.2
MOVE(
 TEMP %rax,
 TEMP t.0)
JUMP(
 NAME L.0)
LABEL L.1
MOVE(
 TEMP t.0,
 CONST 1)
JUMP(
 NAME L.2)
LABEL L.0
# With procedure entry/exit:
MOVE(
 TEMP NotExpr.Not.x,
 TEMP %rdi)
LABEL L.5
MOVE(
 TEMP t.0,
 CONST 0)
BEQ(
 TEMP NotExpr.Not.x,
 CONST 0,
 L.1, L.2)
LABEL L.2
MOVE(
 TEMP %rax,
 TEMP t.0)
JUMP(
 NAME L.0)
LABEL L.1
MOVE(
 TEMP t.0,
 CONST 1)
JUMP(
 NAME L.2)
LABEL L.0
# Instructions:
	movq %rdi,NotExpr.Not.x	# NotExpr.Not.x := %rdi 
L.5:	# <- 
	xorq t.0,t.0	# t.0 <- 
	xorq t.1,t.1	# t.1 <- 
	cmpq t.1,NotExpr.Not.x	# <- NotExpr.Not.x t.1 
	je L.1	# <- : goto L.1 L.2 
L.2:	# <- 
	movq t.0,%rax	# %rax := t.0 
	jmp L.0	# <- : goto L.0 
L.1:	# <- 
	movq $1,t.0	# t.0 <- 
	jmp L.2	# <- : goto L.2 
L.0:	# <- 
# Control Flow Graph:
0: NotExpr.Not.x <- %rdi ; goto 1 
1: t.0 t.1 <- NotExpr.Not.x ; goto 3 2 
2: %rax <- t.0 ; goto 4 
3: t.0 <- ; goto 2 
4: <- %rsp %rbp %rax ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
NotExpr.Not.x: %rsp %rbp t.1 t.0 
t.0: t.1 %rsp %rbp NotExpr.Not.x 
t.1: %rsp %rbp t.0 NotExpr.Not.x 
%rax <= t.0
NotExpr.Not.x <= %rdi
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
NotExpr.Not.x->%rdi
t.0->%rax
t.1->%rbx
# Assembly code:
	.text
NotExpr.Not:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
#	movq %rdi,%rdi
L.5:
	xorq %rax,%rax
	xorq %rbx,%rbx
	cmpq %rbx,%rdi
	je L.1
L.2:
#	movq %rax,%rax
	jmp L.0
L.1:
	movq $1,%rax
	jmp L.2
L.0:
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
END NotExpr.Not
PROCEDURE NotExpr
# With procedure entry/exit:
# Instructions:
# Control Flow Graph:
0: <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.text
NotExpr:
	pushq %rbp
	movq %rsp,%rbp
#	returnSink
	popq %rbp
	ret
END NotExpr
PROCEDURE main
# Before canonicalization (trees):
EXP(
 CALL(
  NAME NotExpr,
  CONST 0))
# After canonicalization (trees):
EXP(
 CALL(
  NAME NotExpr,
  CONST 0))
# Basic Blocks:
LABEL L.6
EXP(
 CALL(
  NAME NotExpr,
  CONST 0))
# Trace Scheduled:
LABEL L.6
EXP(
 CALL(
  NAME NotExpr,
  CONST 0))
# With procedure entry/exit:
LABEL L.6
EXP(
 CALL(
  NAME NotExpr,
  CONST 0))
# Instructions:
L.6:	# <- 
	call NotExpr	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- 
# Control Flow Graph:
0: %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.globl main
	.text
main:
	pushq %rbp
	movq %rsp,%rbp
L.6:
	call NotExpr
#	returnSink
	popq %rbp
	ret
END main
	.data
	.balign 8
L.3:	.asciz	"Attempt to use a null pointer"
PROCEDURE badPtr
# Before canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.3)),
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# After canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.3))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Basic Blocks:
LABEL L.7
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.3))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Trace Scheduled:
LABEL L.7
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.3))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# With procedure entry/exit:
LABEL L.7
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.3))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Instructions:
L.7:	# <- 
	leaq L.3(%rip),t.2	# t.2 <- 
	movq t.2,%rdi	# %rdi := t.2 
	call puts	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $1,t.3	# t.3 <- 
	movq t.3,%rdi	# %rdi := t.3 
	call exit	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
# Control Flow Graph:
0: t.2 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.3 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.2: %rsp %rbp 
t.3: %rsp %rbp 
%rdi <= t.2
%rdi <= t.3
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.2->%rdi
t.3->%rdi
# Assembly code:
	.text
badPtr:
	pushq %rbp
	movq %rsp,%rbp
L.7:
	leaq L.3(%rip),%rdi
#	movq %rdi,%rdi
	call puts
	movabsq $1,%rdi
#	movq %rdi,%rdi
	call exit
#	returnSink
	popq %rbp
	ret
END badPtr
	.data
	.balign 8
L.4:	.asciz	"Subscript out of bounds"
PROCEDURE badSub
# Before canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.4)),
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# After canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.4))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Basic Blocks:
LABEL L.8
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.4))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Trace Scheduled:
LABEL L.8
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.4))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# With procedure entry/exit:
LABEL L.8
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.4))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Instructions:
L.8:	# <- 
	leaq L.4(%rip),t.4	# t.4 <- 
	movq t.4,%rdi	# %rdi := t.4 
	call puts	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $1,t.5	# t.5 <- 
	movq t.5,%rdi	# %rdi := t.5 
	call exit	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
# Control Flow Graph:
0: t.4 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.5 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.4: %rsp %rbp 
t.5: %rsp %rbp 
%rdi <= t.4
%rdi <= t.5
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.4->%rdi
t.5->%rdi
# Assembly code:
	.text
badSub:
	pushq %rbp
	movq %rsp,%rbp
L.8:
	leaq L.4(%rip),%rdi
#	movq %rdi,%rdi
	call puts
	movabsq $1,%rdi
#	movq %rdi,%rdi
	call exit
#	returnSink
	popq %rbp
	ret
END badSub
