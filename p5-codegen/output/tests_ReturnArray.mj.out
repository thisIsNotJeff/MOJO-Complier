PROCEDURE ReturnArray.foo
# Before canonicalization (trees):
MOVE(
 TEMP t.1,
 CONST 3),
MOVE(
 TEMP t.0,
 CONST 0),
BGE(
 TEMP t.0,
 TEMP t.1,
 L.2, L.1),
LABEL L.1,
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP t.0,
    CONST 8)), 
  CONST -32, 8),
 CONST 0),
MOVE(
 TEMP t.0,
 ADD(
  TEMP t.0,
  CONST 1)),
BLT(
 TEMP t.0,
 TEMP t.1,
 L.1, L.2),
LABEL L.2,
MOVE(
 TEMP t.2,
 CONST 0),
MOVE(
 TEMP t.3,
 CONST 2),
MOVE(
 TEMP t.4,
 CONST 1),
LABEL L.3,
MOVE(
 TEMP ReturnArray.foo.1.1.i,
 TEMP t.2),
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   ADD(
    CONST -32,
    MUL(
     TEMP ReturnArray.foo.1.1.i,
     CONST 8))), 
  CONST 0, 8),
 TEMP ReturnArray.foo.1.1.i),
MOVE(
 TEMP t.2,
 ADD(
  TEMP t.2,
  TEMP t.4)),
LABEL L.4,
BLE(
 TEMP t.2,
 TEMP t.3,
 L.3, L.5),
LABEL L.5,
MOVE(
 TEMP t.5,
 MEM(
  TEMP %rbp, 
  CONST -8, 8)),
EXP(
 CALL(
  NAME memmove,
  CONST 0,
  TEMP t.5,
  ADD(
   TEMP %rbp,
   CONST -32),
  CONST 24)),
MOVE(
 TEMP %rax,
 TEMP t.5),
JUMP(
 NAME L.0),
LABEL L.0
# After canonicalization (trees):
MOVE(
 TEMP t.1,
 CONST 3)
MOVE(
 TEMP t.0,
 CONST 0)
BGE(
 TEMP t.0,
 TEMP t.1,
 L.2, L.1)
LABEL L.1
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP t.0,
    CONST 8)), 
  CONST -32, 8),
 CONST 0)
MOVE(
 TEMP t.0,
 ADD(
  TEMP t.0,
  CONST 1))
BLT(
 TEMP t.0,
 TEMP t.1,
 L.1, L.2)
LABEL L.2
MOVE(
 TEMP t.2,
 CONST 0)
MOVE(
 TEMP t.3,
 CONST 2)
MOVE(
 TEMP t.4,
 CONST 1)
LABEL L.3
MOVE(
 TEMP ReturnArray.foo.1.1.i,
 TEMP t.2)
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   ADD(
    CONST -32,
    MUL(
     TEMP ReturnArray.foo.1.1.i,
     CONST 8))), 
  CONST 0, 8),
 TEMP ReturnArray.foo.1.1.i)
MOVE(
 TEMP t.2,
 ADD(
  TEMP t.2,
  TEMP t.4))
LABEL L.4
BLE(
 TEMP t.2,
 TEMP t.3,
 L.3, L.5)
LABEL L.5
MOVE(
 TEMP t.5,
 MEM(
  TEMP %rbp, 
  CONST -8, 8))
EXP(
 CALL(
  NAME memmove,
  CONST 0,
  TEMP t.5,
  ADD(
   TEMP %rbp,
   CONST -32),
  CONST 24))
MOVE(
 TEMP %rax,
 TEMP t.5)
JUMP(
 NAME L.0)
LABEL L.0
# Basic Blocks:
LABEL L.10
MOVE(
 TEMP t.1,
 CONST 3)
MOVE(
 TEMP t.0,
 CONST 0)
BGE(
 TEMP t.0,
 TEMP t.1,
 L.2, L.1)
LABEL L.1
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP t.0,
    CONST 8)), 
  CONST -32, 8),
 CONST 0)
MOVE(
 TEMP t.0,
 ADD(
  TEMP t.0,
  CONST 1))
BLT(
 TEMP t.0,
 TEMP t.1,
 L.1, L.2)
LABEL L.2
MOVE(
 TEMP t.2,
 CONST 0)
MOVE(
 TEMP t.3,
 CONST 2)
MOVE(
 TEMP t.4,
 CONST 1)
JUMP(
 NAME L.3)
LABEL L.3
MOVE(
 TEMP ReturnArray.foo.1.1.i,
 TEMP t.2)
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   ADD(
    CONST -32,
    MUL(
     TEMP ReturnArray.foo.1.1.i,
     CONST 8))), 
  CONST 0, 8),
 TEMP ReturnArray.foo.1.1.i)
MOVE(
 TEMP t.2,
 ADD(
  TEMP t.2,
  TEMP t.4))
JUMP(
 NAME L.4)
LABEL L.4
BLE(
 TEMP t.2,
 TEMP t.3,
 L.3, L.5)
LABEL L.5
MOVE(
 TEMP t.5,
 MEM(
  TEMP %rbp, 
  CONST -8, 8))
EXP(
 CALL(
  NAME memmove,
  CONST 0,
  TEMP t.5,
  ADD(
   TEMP %rbp,
   CONST -32),
  CONST 24))
MOVE(
 TEMP %rax,
 TEMP t.5)
JUMP(
 NAME L.0)
LABEL L.0
# Trace Scheduled:
LABEL L.10
MOVE(
 TEMP t.1,
 CONST 3)
MOVE(
 TEMP t.0,
 CONST 0)
BGE(
 TEMP t.0,
 TEMP t.1,
 L.2, L.1)
LABEL L.1
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP t.0,
    CONST 8)), 
  CONST -32, 8),
 CONST 0)
MOVE(
 TEMP t.0,
 ADD(
  TEMP t.0,
  CONST 1))
BLT(
 TEMP t.0,
 TEMP t.1,
 L.1, L.2)
LABEL L.2
MOVE(
 TEMP t.2,
 CONST 0)
MOVE(
 TEMP t.3,
 CONST 2)
MOVE(
 TEMP t.4,
 CONST 1)
LABEL L.3
MOVE(
 TEMP ReturnArray.foo.1.1.i,
 TEMP t.2)
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   ADD(
    CONST -32,
    MUL(
     TEMP ReturnArray.foo.1.1.i,
     CONST 8))), 
  CONST 0, 8),
 TEMP ReturnArray.foo.1.1.i)
MOVE(
 TEMP t.2,
 ADD(
  TEMP t.2,
  TEMP t.4))
LABEL L.4
BLE(
 TEMP t.2,
 TEMP t.3,
 L.3, L.5)
LABEL L.5
MOVE(
 TEMP t.5,
 MEM(
  TEMP %rbp, 
  CONST -8, 8))
EXP(
 CALL(
  NAME memmove,
  CONST 0,
  TEMP t.5,
  ADD(
   TEMP %rbp,
   CONST -32),
  CONST 24))
MOVE(
 TEMP %rax,
 TEMP t.5)
LABEL L.0
# With procedure entry/exit:
MOVE(
 MEM(
  TEMP %rbp, 
  CONST -8, 8),
 TEMP %rdi)
LABEL L.10
MOVE(
 TEMP t.1,
 CONST 3)
MOVE(
 TEMP t.0,
 CONST 0)
BGE(
 TEMP t.0,
 TEMP t.1,
 L.2, L.1)
LABEL L.1
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP t.0,
    CONST 8)), 
  CONST -32, 8),
 CONST 0)
MOVE(
 TEMP t.0,
 ADD(
  TEMP t.0,
  CONST 1))
BLT(
 TEMP t.0,
 TEMP t.1,
 L.1, L.2)
LABEL L.2
MOVE(
 TEMP t.2,
 CONST 0)
MOVE(
 TEMP t.3,
 CONST 2)
MOVE(
 TEMP t.4,
 CONST 1)
LABEL L.3
MOVE(
 TEMP ReturnArray.foo.1.1.i,
 TEMP t.2)
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   ADD(
    CONST -32,
    MUL(
     TEMP ReturnArray.foo.1.1.i,
     CONST 8))), 
  CONST 0, 8),
 TEMP ReturnArray.foo.1.1.i)
MOVE(
 TEMP t.2,
 ADD(
  TEMP t.2,
  TEMP t.4))
LABEL L.4
BLE(
 TEMP t.2,
 TEMP t.3,
 L.3, L.5)
LABEL L.5
MOVE(
 TEMP t.5,
 MEM(
  TEMP %rbp, 
  CONST -8, 8))
EXP(
 CALL(
  NAME memmove,
  CONST 0,
  TEMP t.5,
  ADD(
   TEMP %rbp,
   CONST -32),
  CONST 24))
MOVE(
 TEMP %rax,
 TEMP t.5)
LABEL L.0
# Instructions:
	movq %rdi,-8(%rbp)	# <- %rdi %rbp 
L.10:	# <- 
	movabsq $3,t.6	# t.6 <- 
	movq t.6,t.1	# t.1 := t.6 
	movabsq $0,t.7	# t.7 <- 
	movq t.7,t.0	# t.0 := t.7 
	cmpq t.1,t.0	# <- t.0 t.1 
	jge L.2	# <- 
L.1:	# <- 
	shlq $3,t.0	# t.0 <- t.0 
	addq t.0, %rbp	# %rbp <- %rbp t.0 
	movabsq $0,t.9	# t.9 <- 
	movq t.9,-32(%rbp)	# <- t.9 %rbp 
	addq $1,t.0	# t.0 <- t.0 
#	movq t.0,t.0	# t.0 := t.0 
	cmpq t.1,t.0	# <- t.0 t.1 
	jl L.1	# <- 
L.2:	# <- 
	movabsq $0,t.10	# t.10 <- 
	movq t.10,t.2	# t.2 := t.10 
	movabsq $2,t.11	# t.11 <- 
	movq t.11,t.3	# t.3 := t.11 
	movabsq $1,t.12	# t.12 <- 
	movq t.12,t.4	# t.4 := t.12 
L.3:	# <- 
	movq t.2,ReturnArray.foo.1.1.i	# ReturnArray.foo.1.1.i := t.2 
	shlq $3,ReturnArray.foo.1.1.i	# ReturnArray.foo.1.1.i <- ReturnArray.foo.1.1.i 
	addq $-32,ReturnArray.foo.1.1.i	# ReturnArray.foo.1.1.i <- ReturnArray.foo.1.1.i 
	addq ReturnArray.foo.1.1.i, %rbp	# %rbp <- %rbp ReturnArray.foo.1.1.i 
	movq ReturnArray.foo.1.1.i,0(%rbp)	# <- ReturnArray.foo.1.1.i %rbp 
	addq t.4, t.2	# t.2 <- t.2 t.4 
#	movq t.2,t.2	# t.2 := t.2 
L.4:	# <- 
	cmpq t.3,t.2	# <- t.2 t.3 
	jle L.3	# <- 
L.5:	# <- 
	movq -8(%rbp),t.15	# t.15 <- %rbp 
	movq t.15,t.5	# t.5 := t.15 
	movq t.5,%rdi	# %rdi := t.5 
	addq $-32,%rbp	# %rbp <- %rbp 
	movq %rbp,%rsi	# %rsi := %rbp 
	movabsq $24,t.16	# t.16 <- 
	movq t.16,%rdx	# %rdx := t.16 
	call memmove	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi %rsi %rdx 
	movq t.5,%rax	# %rax := t.5 
L.0:	# <- 
# Control Flow Graph:
0: <- %rdi %rbp ; goto 1 
1: t.6 t.1 t.7 t.0 <- ; goto 2 
2: t.0 %rbp t.9 <- t.0 %rbp t.1 ; goto 3 
3: t.10 t.2 t.11 t.3 t.12 t.4 <- ; goto 4 
4: ReturnArray.foo.1.1.i %rbp t.2 <- t.2 %rbp t.4 ; goto 5 
5: <- t.2 t.3 ; goto 6 
6: t.15 t.5 %rdi %rbp %rsi t.16 %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rbp ; goto 7 
7: <- %rsp %rbp %rax ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.6: %rbp %rsp 
t.1: t.0 t.7 %rbp %rsp t.9 
t.7: %rbp t.1 %rsp 
t.0: %rbp t.1 %rsp t.9 
t.9: %rbp %rsp t.1 t.0 
t.10: %rbp %rsp 
t.2: t.4 t.12 t.3 t.11 %rbp %rsp ReturnArray.foo.1.1.i 
t.11: t.2 %rbp %rsp 
t.3: t.4 t.12 t.2 %rbp %rsp ReturnArray.foo.1.1.i 
t.12: t.2 %rbp t.3 %rsp 
t.4: t.2 %rbp t.3 %rsp ReturnArray.foo.1.1.i 
ReturnArray.foo.1.1.i: %rbp t.3 %rsp t.2 t.4 
t.15: %rsp %rbp 
t.5: %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.16 %rbp %rsp 
t.16: %rsp %rbp t.5 %rdi %rsi 
t.5 <= t.15
%rdi <= t.5
%rsi <= %rbp
%rdx <= t.16
%rax <= t.5
ReturnArray.foo.1.1.i <= t.2
t.2 <= t.2
t.2 <= t.10
t.3 <= t.11
t.4 <= t.12
t.0 <= t.0
t.1 <= t.6
t.0 <= t.7
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.6->%rax
t.1->%rcx
t.7->%rax
t.0->%rbx
t.9->%rax
t.10->%rax
t.2->%rdx
t.11->%rax
t.3->%rcx
t.12->%rax
t.4->%rbx
ReturnArray.foo.1.1.i->%rax
t.15->%rax
t.5->%rbx
t.16->%rax
# Assembly code:
	.text
ReturnArray.foo:
	pushq %rbp
	movq %rsp,%rbp
	subq $48,%rsp
	movq %rbx, -40(%rbp)
	movq %rdi,-8(%rbp)
L.10:
	movabsq $3,%rax
	movq %rax,%rcx
	movabsq $0,%rax
	movq %rax,%rbx
	cmpq %rcx,%rbx
	jge L.2
L.1:
	shlq $3,%rbx
	addq %rbx, %rbp
	movabsq $0,%rax
	movq %rax,-32(%rbp)
	addq $1,%rbx
#	movq %rbx,%rbx
	cmpq %rcx,%rbx
	jl L.1
L.2:
	movabsq $0,%rax
	movq %rax,%rdx
	movabsq $2,%rax
	movq %rax,%rcx
	movabsq $1,%rax
	movq %rax,%rbx
L.3:
	movq %rdx,%rax
	shlq $3,%rax
	addq $-32,%rax
	addq %rax, %rbp
	movq %rax,0(%rbp)
	addq %rbx, %rdx
#	movq %rdx,%rdx
L.4:
	cmpq %rcx,%rdx
	jle L.3
L.5:
	movq -8(%rbp),%rax
	movq %rax,%rbx
	movq %rbx,%rdi
	addq $-32,%rbp
	movq %rbp,%rsi
	movabsq $24,%rax
	movq %rax,%rdx
	call memmove
	movq %rbx,%rax
L.0:
#	returnSink
	movq -40(%rbp),%rbx
	addq $48,%rsp
	popq %rbp
	ret
L.6:
	call badSub
END ReturnArray.foo
PROCEDURE ReturnArray
# Before canonicalization (trees):
EXP(
 CALL(
  NAME memmove,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -24),
  CALL(
   NAME ReturnArray.foo,
   CONST 0,
   ADD(
    TEMP %rbp,
    CONST -48)),
  CONST 24)),
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -24, 8)))),
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10)),
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -16, 8)))),
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10)),
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -8, 8)))),
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
# After canonicalization (trees):
MOVE(
 TEMP t.17,
 CALL(
  NAME ReturnArray.foo,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -48)))
EXP(
 CALL(
  NAME memmove,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -24),
  TEMP t.17,
  CONST 24))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -24, 8))))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -16, 8))))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -8, 8))))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
# Basic Blocks:
LABEL L.11
MOVE(
 TEMP t.17,
 CALL(
  NAME ReturnArray.foo,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -48)))
EXP(
 CALL(
  NAME memmove,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -24),
  TEMP t.17,
  CONST 24))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -24, 8))))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -16, 8))))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -8, 8))))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
# Trace Scheduled:
LABEL L.11
MOVE(
 TEMP t.17,
 CALL(
  NAME ReturnArray.foo,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -48)))
EXP(
 CALL(
  NAME memmove,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -24),
  TEMP t.17,
  CONST 24))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -24, 8))))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -16, 8))))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -8, 8))))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
# With procedure entry/exit:
LABEL L.11
MOVE(
 TEMP t.17,
 CALL(
  NAME ReturnArray.foo,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -48)))
EXP(
 CALL(
  NAME memmove,
  CONST 0,
  ADD(
   TEMP %rbp,
   CONST -24),
  TEMP t.17,
  CONST 24))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -24, 8))))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -16, 8))))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  ADD(
   CONST 48,
   MEM(
    TEMP %rbp, 
    CONST -8, 8))))
EXP(
 CALL(
  NAME putchar,
  CONST 0,
  CONST 10))
# Instructions:
L.11:	# <- 
	addq $-48,%rbp	# %rbp <- %rbp 
	movq %rbp,%rdi	# %rdi := %rbp 
	call ReturnArray.foo	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.17	# t.17 := %rax 
	addq $-24,%rbp	# %rbp <- %rbp 
	movq %rbp,%rdi	# %rdi := %rbp 
	movq t.17,%rsi	# %rsi := t.17 
	movabsq $24,t.18	# t.18 <- 
	movq t.18,%rdx	# %rdx := t.18 
	call memmove	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi %rsi %rdx 
	movq -24(%rbp),t.19	# t.19 <- %rbp 
	addq $48,t.19	# t.19 <- t.19 
	movq t.19,%rdi	# %rdi := t.19 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $10,t.20	# t.20 <- 
	movq t.20,%rdi	# %rdi := t.20 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq -16(%rbp),t.21	# t.21 <- %rbp 
	addq $48,t.21	# t.21 <- t.21 
	movq t.21,%rdi	# %rdi := t.21 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $10,t.22	# t.22 <- 
	movq t.22,%rdi	# %rdi := t.22 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq -8(%rbp),t.23	# t.23 <- %rbp 
	addq $48,t.23	# t.23 <- t.23 
	movq t.23,%rdi	# %rdi := t.23 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $10,t.24	# t.24 <- 
	movq t.24,%rdi	# %rdi := t.24 
	call putchar	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
# Control Flow Graph:
0: %rbp %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.17 t.18 t.19 t.20 t.21 t.22 t.23 t.24 <- %rbp %rsp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.17: %rdi %rbp %rsp 
t.18: %rsp %rbp %rdi %rsi 
t.19: %rsp %rbp 
t.20: %rsp %rbp 
t.21: %rsp %rbp 
t.22: %rsp %rbp 
t.23: %rsp %rbp 
t.24: %rsp %rbp 
%rdi <= %rbp
t.17 <= %rax
%rdi <= %rbp
%rsi <= t.17
%rdx <= t.18
%rdi <= t.19
%rdi <= t.20
%rdi <= t.21
%rdi <= t.22
%rdi <= t.23
%rdi <= t.24
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.17->%rax
t.18->%rax
t.19->%rax
t.20->%rax
t.21->%rax
t.22->%rax
t.23->%rax
t.24->%rax
# Assembly code:
	.text
ReturnArray:
	pushq %rbp
	movq %rsp,%rbp
	subq $48,%rsp
L.11:
	addq $-48,%rbp
	movq %rbp,%rdi
	call ReturnArray.foo
#	movq %rax,%rax
	addq $-24,%rbp
	movq %rbp,%rdi
	movq %rax,%rsi
	movabsq $24,%rax
	movq %rax,%rdx
	call memmove
	movq -24(%rbp),%rax
	addq $48,%rax
	movq %rax,%rdi
	call putchar
	movabsq $10,%rax
	movq %rax,%rdi
	call putchar
	movq -16(%rbp),%rax
	addq $48,%rax
	movq %rax,%rdi
	call putchar
	movabsq $10,%rax
	movq %rax,%rdi
	call putchar
	movq -8(%rbp),%rax
	addq $48,%rax
	movq %rax,%rdi
	call putchar
	movabsq $10,%rax
	movq %rax,%rdi
	call putchar
#	returnSink
	addq $48,%rsp
	popq %rbp
	ret
L.7:
	call badSub
END ReturnArray
PROCEDURE main
# Before canonicalization (trees):
EXP(
 CALL(
  NAME ReturnArray,
  CONST 0))
# After canonicalization (trees):
EXP(
 CALL(
  NAME ReturnArray,
  CONST 0))
# Basic Blocks:
LABEL L.12
EXP(
 CALL(
  NAME ReturnArray,
  CONST 0))
# Trace Scheduled:
LABEL L.12
EXP(
 CALL(
  NAME ReturnArray,
  CONST 0))
# With procedure entry/exit:
LABEL L.12
EXP(
 CALL(
  NAME ReturnArray,
  CONST 0))
# Instructions:
L.12:	# <- 
	call ReturnArray	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- 
# Control Flow Graph:
0: %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.globl main
	.text
main:
	pushq %rbp
	movq %rsp,%rbp
L.12:
	call ReturnArray
#	returnSink
	popq %rbp
	ret
END main
	.data
	.balign 8
L.8:	.asciz	"Attempt to use a null pointer"
PROCEDURE badPtr
# Before canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.8)),
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# After canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.8))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Basic Blocks:
LABEL L.13
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.8))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Trace Scheduled:
LABEL L.13
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.8))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# With procedure entry/exit:
LABEL L.13
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.8))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Instructions:
L.13:	# <- 
	leaq L.8(%rip),t.25	# t.25 <- 
	movq t.25,%rdi	# %rdi := t.25 
	call puts	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $1,t.26	# t.26 <- 
	movq t.26,%rdi	# %rdi := t.26 
	call exit	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
# Control Flow Graph:
0: t.25 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.26 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.25: %rsp %rbp 
t.26: %rsp %rbp 
%rdi <= t.25
%rdi <= t.26
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.25->%rax
t.26->%rax
# Assembly code:
	.text
badPtr:
	pushq %rbp
	movq %rsp,%rbp
L.13:
	leaq L.8(%rip),%rax
	movq %rax,%rdi
	call puts
	movabsq $1,%rax
	movq %rax,%rdi
	call exit
#	returnSink
	popq %rbp
	ret
END badPtr
	.data
	.balign 8
L.9:	.asciz	"Subscript out of bounds"
PROCEDURE badSub
# Before canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.9)),
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# After canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.9))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Basic Blocks:
LABEL L.14
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.9))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Trace Scheduled:
LABEL L.14
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.9))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# With procedure entry/exit:
LABEL L.14
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.9))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Instructions:
L.14:	# <- 
	leaq L.9(%rip),t.27	# t.27 <- 
	movq t.27,%rdi	# %rdi := t.27 
	call puts	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $1,t.28	# t.28 <- 
	movq t.28,%rdi	# %rdi := t.28 
	call exit	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
# Control Flow Graph:
0: t.27 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.28 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.27: %rsp %rbp 
t.28: %rsp %rbp 
%rdi <= t.27
%rdi <= t.28
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.27->%rax
t.28->%rax
# Assembly code:
	.text
badSub:
	pushq %rbp
	movq %rsp,%rbp
L.14:
	leaq L.9(%rip),%rax
	movq %rax,%rdi
	call puts
	movabsq $1,%rax
	movq %rax,%rdi
	call exit
#	returnSink
	popq %rbp
	ret
END badSub
