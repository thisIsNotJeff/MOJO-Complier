PROCEDURE AssignRef2
# Before canonicalization (trees):
MOVE(
 TEMP AssignRef2.1.x,
 ESEQ(
  MOVE(
   TEMP t.0,
   CALL(
    NAME malloc,
    CONST 0,
    CONST 8)),
  MOVE(
   MEM(
    TEMP t.0, 
    CONST 0, 8),
   CONST 0),
  TEMP t.0))
# After canonicalization (trees):
MOVE(
 TEMP t.0,
 CALL(
  NAME malloc,
  CONST 0,
  CONST 8))
MOVE(
 MEM(
  TEMP t.0, 
  CONST 0, 8),
 CONST 0)
MOVE(
 TEMP AssignRef2.1.x,
 TEMP t.0)
# Basic Blocks:
LABEL L.2
MOVE(
 TEMP t.0,
 CALL(
  NAME malloc,
  CONST 0,
  CONST 8))
MOVE(
 MEM(
  TEMP t.0, 
  CONST 0, 8),
 CONST 0)
MOVE(
 TEMP AssignRef2.1.x,
 TEMP t.0)
# Trace Scheduled:
LABEL L.2
MOVE(
 TEMP t.0,
 CALL(
  NAME malloc,
  CONST 0,
  CONST 8))
MOVE(
 MEM(
  TEMP t.0, 
  CONST 0, 8),
 CONST 0)
MOVE(
 TEMP AssignRef2.1.x,
 TEMP t.0)
# With procedure entry/exit:
LABEL L.2
MOVE(
 TEMP t.0,
 CALL(
  NAME malloc,
  CONST 0,
  CONST 8))
MOVE(
 MEM(
  TEMP t.0, 
  CONST 0, 8),
 CONST 0)
MOVE(
 TEMP AssignRef2.1.x,
 TEMP t.0)
# Instructions:
L.2:	# <- 
	movabsq $8,t.1	# t.1 <- 
	movq t.1,%rdi	# %rdi := t.1 
	call malloc	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movq %rax,t.0	# t.0 := %rax 
	movabsq $0,t.2	# t.2 <- 
	movq t.2,0(t.0)	# <- t.2 t.0 
	movq t.0,AssignRef2.1.x	# AssignRef2.1.x := t.0 
# Control Flow Graph:
0: t.1 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.0 t.2 AssignRef2.1.x <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.1: %rsp %rbp 
t.0: t.2 %rsp %rbp 
t.2: %rsp %rbp t.0 
AssignRef2.1.x: %rsp %rbp 
%rdi <= t.1
t.0 <= %rax
AssignRef2.1.x <= t.0
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.1->%rax
t.0->%rbx
t.2->%rax
AssignRef2.1.x->%rax
# Assembly code:
	.text
AssignRef2:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
L.2:
	movabsq $8,%rax
	movq %rax,%rdi
	call malloc
	movq %rax,%rbx
	movabsq $0,%rax
	movq %rax,0(%rbx)
	movq %rbx,%rax
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
END AssignRef2
PROCEDURE main
# Before canonicalization (trees):
EXP(
 CALL(
  NAME AssignRef2,
  CONST 0))
# After canonicalization (trees):
EXP(
 CALL(
  NAME AssignRef2,
  CONST 0))
# Basic Blocks:
LABEL L.3
EXP(
 CALL(
  NAME AssignRef2,
  CONST 0))
# Trace Scheduled:
LABEL L.3
EXP(
 CALL(
  NAME AssignRef2,
  CONST 0))
# With procedure entry/exit:
LABEL L.3
EXP(
 CALL(
  NAME AssignRef2,
  CONST 0))
# Instructions:
L.3:	# <- 
	call AssignRef2	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- 
# Control Flow Graph:
0: %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.globl main
	.text
main:
	pushq %rbp
	movq %rsp,%rbp
L.3:
	call AssignRef2
#	returnSink
	popq %rbp
	ret
END main
	.data
	.balign 8
L.0:	.asciz	"Attempt to use a null pointer"
PROCEDURE badPtr
# Before canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.0)),
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# After canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.0))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Basic Blocks:
LABEL L.4
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.0))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Trace Scheduled:
LABEL L.4
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.0))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# With procedure entry/exit:
LABEL L.4
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.0))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Instructions:
L.4:	# <- 
	leaq L.0(%rip),t.3	# t.3 <- 
	movq t.3,%rdi	# %rdi := t.3 
	call puts	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $1,t.4	# t.4 <- 
	movq t.4,%rdi	# %rdi := t.4 
	call exit	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
# Control Flow Graph:
0: t.3 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.4 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.3: %rsp %rbp 
t.4: %rsp %rbp 
%rdi <= t.3
%rdi <= t.4
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.3->%rax
t.4->%rax
# Assembly code:
	.text
badPtr:
	pushq %rbp
	movq %rsp,%rbp
L.4:
	leaq L.0(%rip),%rax
	movq %rax,%rdi
	call puts
	movabsq $1,%rax
	movq %rax,%rdi
	call exit
#	returnSink
	popq %rbp
	ret
END badPtr
	.data
	.balign 8
L.1:	.asciz	"Subscript out of bounds"
PROCEDURE badSub
# Before canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.1)),
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# After canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.1))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Basic Blocks:
LABEL L.5
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.1))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Trace Scheduled:
LABEL L.5
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.1))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# With procedure entry/exit:
LABEL L.5
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.1))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Instructions:
L.5:	# <- 
	leaq L.1(%rip),t.5	# t.5 <- 
	movq t.5,%rdi	# %rdi := t.5 
	call puts	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $1,t.6	# t.6 <- 
	movq t.6,%rdi	# %rdi := t.6 
	call exit	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
# Control Flow Graph:
0: t.5 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.6 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.5: %rsp %rbp 
t.6: %rsp %rbp 
%rdi <= t.5
%rdi <= t.6
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.5->%rax
t.6->%rax
# Assembly code:
	.text
badSub:
	pushq %rbp
	movq %rsp,%rbp
L.5:
	leaq L.1(%rip),%rax
	movq %rax,%rdi
	call puts
	movabsq $1,%rax
	movq %rax,%rdi
	call exit
#	returnSink
	popq %rbp
	ret
END badSub
