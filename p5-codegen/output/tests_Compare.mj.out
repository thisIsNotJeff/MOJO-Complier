PROCEDURE Compare.LT
# Before canonicalization (trees):
MOVE(
 TEMP %rax,
 ESEQ(
  MOVE(
   TEMP t.0,
   CONST 0),
  BLT(
   TEMP Compare.LT.x,
   TEMP Compare.LT.y,
   L.1, L.2),
  LABEL L.1,
  MOVE(
   TEMP t.0,
   CONST 1),
  LABEL L.2,
  TEMP t.0)),
JUMP(
 NAME L.0),
LABEL L.0
# After canonicalization (trees):
MOVE(
 TEMP t.0,
 CONST 0)
BLT(
 TEMP Compare.LT.x,
 TEMP Compare.LT.y,
 L.1, L.2)
LABEL L.1
MOVE(
 TEMP t.0,
 CONST 1)
LABEL L.2
MOVE(
 TEMP %rax,
 TEMP t.0)
JUMP(
 NAME L.0)
LABEL L.0
# Basic Blocks:
LABEL L.14
MOVE(
 TEMP t.0,
 CONST 0)
BLT(
 TEMP Compare.LT.x,
 TEMP Compare.LT.y,
 L.1, L.2)
LABEL L.1
MOVE(
 TEMP t.0,
 CONST 1)
JUMP(
 NAME L.2)
LABEL L.2
MOVE(
 TEMP %rax,
 TEMP t.0)
JUMP(
 NAME L.0)
LABEL L.0
# Trace Scheduled:
LABEL L.14
MOVE(
 TEMP t.0,
 CONST 0)
BLT(
 TEMP Compare.LT.x,
 TEMP Compare.LT.y,
 L.1, L.2)
LABEL L.2
MOVE(
 TEMP %rax,
 TEMP t.0)
JUMP(
 NAME L.0)
LABEL L.1
MOVE(
 TEMP t.0,
 CONST 1)
JUMP(
 NAME L.2)
LABEL L.0
# With procedure entry/exit:
MOVE(
 TEMP Compare.LT.x,
 TEMP %rdi)
MOVE(
 TEMP Compare.LT.y,
 TEMP %rsi)
LABEL L.14
MOVE(
 TEMP t.0,
 CONST 0)
BLT(
 TEMP Compare.LT.x,
 TEMP Compare.LT.y,
 L.1, L.2)
LABEL L.2
MOVE(
 TEMP %rax,
 TEMP t.0)
JUMP(
 NAME L.0)
LABEL L.1
MOVE(
 TEMP t.0,
 CONST 1)
JUMP(
 NAME L.2)
LABEL L.0
# Instructions:
	movq %rdi,Compare.LT.x	# Compare.LT.x := %rdi 
	movq %rsi,Compare.LT.y	# Compare.LT.y := %rsi 
L.14:	# <- 
	movabsq $0,t.4	# t.4 <- 
	movq t.4,t.0	# t.0 := t.4 
	cmpq Compare.LT.y,Compare.LT.x	# <- Compare.LT.x Compare.LT.y 
	jl L.1	# <- 
L.2:	# <- 
	movq t.0,%rax	# %rax := t.0 
	jmpq L.0	# <- : goto L.0 
L.1:	# <- 
	movabsq $1,t.5	# t.5 <- 
	movq t.5,t.0	# t.0 := t.5 
	jmpq L.2	# <- : goto L.2 
L.0:	# <- 
# Control Flow Graph:
0: Compare.LT.x Compare.LT.y <- %rdi %rsi ; goto 1 
1: t.4 t.0 <- Compare.LT.x Compare.LT.y ; goto 2 
2: %rax <- t.0 ; goto 4 
3: t.5 t.0 <- ; goto 2 
4: <- %rsp %rbp %rax ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
Compare.LT.x: Compare.LT.y %rsp %rbp %rsi t.0 t.4 
Compare.LT.y: Compare.LT.x %rsp %rbp t.0 t.4 
t.4: %rsp %rbp Compare.LT.x Compare.LT.y 
t.0: %rsp %rbp Compare.LT.x Compare.LT.y 
t.5: %rsp %rbp 
t.0 <= t.5
%rax <= t.0
t.0 <= t.4
Compare.LT.x <= %rdi
Compare.LT.y <= %rsi
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
Compare.LT.x->%rcx
Compare.LT.y->%rbx
t.4->%rax
t.0->%rax
t.5->%rax
# Assembly code:
	.text
Compare.LT:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
	movq %rdi,%rcx
	movq %rsi,%rbx
L.14:
	movabsq $0,%rax
#	movq %rax,%rax
	cmpq %rbx,%rcx
	jl L.1
L.2:
#	movq %rax,%rax
	jmpq L.0
L.1:
	movabsq $1,%rax
#	movq %rax,%rax
	jmpq L.2
L.0:
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
END Compare.LT
PROCEDURE Compare.LE
# Before canonicalization (trees):
MOVE(
 TEMP %rax,
 ESEQ(
  MOVE(
   TEMP t.1,
   CONST 0),
  BLE(
   TEMP Compare.LE.x,
   TEMP Compare.LE.y,
   L.4, L.5),
  LABEL L.4,
  MOVE(
   TEMP t.1,
   CONST 1),
  LABEL L.5,
  TEMP t.1)),
JUMP(
 NAME L.3),
LABEL L.3
# After canonicalization (trees):
MOVE(
 TEMP t.1,
 CONST 0)
BLE(
 TEMP Compare.LE.x,
 TEMP Compare.LE.y,
 L.4, L.5)
LABEL L.4
MOVE(
 TEMP t.1,
 CONST 1)
LABEL L.5
MOVE(
 TEMP %rax,
 TEMP t.1)
JUMP(
 NAME L.3)
LABEL L.3
# Basic Blocks:
LABEL L.15
MOVE(
 TEMP t.1,
 CONST 0)
BLE(
 TEMP Compare.LE.x,
 TEMP Compare.LE.y,
 L.4, L.5)
LABEL L.4
MOVE(
 TEMP t.1,
 CONST 1)
JUMP(
 NAME L.5)
LABEL L.5
MOVE(
 TEMP %rax,
 TEMP t.1)
JUMP(
 NAME L.3)
LABEL L.3
# Trace Scheduled:
LABEL L.15
MOVE(
 TEMP t.1,
 CONST 0)
BLE(
 TEMP Compare.LE.x,
 TEMP Compare.LE.y,
 L.4, L.5)
LABEL L.5
MOVE(
 TEMP %rax,
 TEMP t.1)
JUMP(
 NAME L.3)
LABEL L.4
MOVE(
 TEMP t.1,
 CONST 1)
JUMP(
 NAME L.5)
LABEL L.3
# With procedure entry/exit:
MOVE(
 TEMP Compare.LE.x,
 TEMP %rdi)
MOVE(
 TEMP Compare.LE.y,
 TEMP %rsi)
LABEL L.15
MOVE(
 TEMP t.1,
 CONST 0)
BLE(
 TEMP Compare.LE.x,
 TEMP Compare.LE.y,
 L.4, L.5)
LABEL L.5
MOVE(
 TEMP %rax,
 TEMP t.1)
JUMP(
 NAME L.3)
LABEL L.4
MOVE(
 TEMP t.1,
 CONST 1)
JUMP(
 NAME L.5)
LABEL L.3
# Instructions:
	movq %rdi,Compare.LE.x	# Compare.LE.x := %rdi 
	movq %rsi,Compare.LE.y	# Compare.LE.y := %rsi 
L.15:	# <- 
	movabsq $0,t.6	# t.6 <- 
	movq t.6,t.1	# t.1 := t.6 
	cmpq Compare.LE.y,Compare.LE.x	# <- Compare.LE.x Compare.LE.y 
	jle L.4	# <- 
L.5:	# <- 
	movq t.1,%rax	# %rax := t.1 
	jmpq L.3	# <- : goto L.3 
L.4:	# <- 
	movabsq $1,t.7	# t.7 <- 
	movq t.7,t.1	# t.1 := t.7 
	jmpq L.5	# <- : goto L.5 
L.3:	# <- 
# Control Flow Graph:
0: Compare.LE.x Compare.LE.y <- %rdi %rsi ; goto 1 
1: t.6 t.1 <- Compare.LE.x Compare.LE.y ; goto 2 
2: %rax <- t.1 ; goto 4 
3: t.7 t.1 <- ; goto 2 
4: <- %rsp %rbp %rax ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
Compare.LE.x: Compare.LE.y %rsp %rbp %rsi t.1 t.6 
Compare.LE.y: Compare.LE.x %rsp %rbp t.1 t.6 
t.6: %rsp %rbp Compare.LE.x Compare.LE.y 
t.1: %rsp %rbp Compare.LE.x Compare.LE.y 
t.7: %rsp %rbp 
t.1 <= t.7
%rax <= t.1
t.1 <= t.6
Compare.LE.x <= %rdi
Compare.LE.y <= %rsi
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
Compare.LE.x->%rcx
Compare.LE.y->%rbx
t.6->%rax
t.1->%rax
t.7->%rax
# Assembly code:
	.text
Compare.LE:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
	movq %rdi,%rcx
	movq %rsi,%rbx
L.15:
	movabsq $0,%rax
#	movq %rax,%rax
	cmpq %rbx,%rcx
	jle L.4
L.5:
#	movq %rax,%rax
	jmpq L.3
L.4:
	movabsq $1,%rax
#	movq %rax,%rax
	jmpq L.5
L.3:
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
END Compare.LE
PROCEDURE Compare.GT
# Before canonicalization (trees):
MOVE(
 TEMP %rax,
 ESEQ(
  MOVE(
   TEMP t.2,
   CONST 0),
  BGT(
   TEMP Compare.GT.x,
   TEMP Compare.GT.y,
   L.7, L.8),
  LABEL L.7,
  MOVE(
   TEMP t.2,
   CONST 1),
  LABEL L.8,
  TEMP t.2)),
JUMP(
 NAME L.6),
LABEL L.6
# After canonicalization (trees):
MOVE(
 TEMP t.2,
 CONST 0)
BGT(
 TEMP Compare.GT.x,
 TEMP Compare.GT.y,
 L.7, L.8)
LABEL L.7
MOVE(
 TEMP t.2,
 CONST 1)
LABEL L.8
MOVE(
 TEMP %rax,
 TEMP t.2)
JUMP(
 NAME L.6)
LABEL L.6
# Basic Blocks:
LABEL L.16
MOVE(
 TEMP t.2,
 CONST 0)
BGT(
 TEMP Compare.GT.x,
 TEMP Compare.GT.y,
 L.7, L.8)
LABEL L.7
MOVE(
 TEMP t.2,
 CONST 1)
JUMP(
 NAME L.8)
LABEL L.8
MOVE(
 TEMP %rax,
 TEMP t.2)
JUMP(
 NAME L.6)
LABEL L.6
# Trace Scheduled:
LABEL L.16
MOVE(
 TEMP t.2,
 CONST 0)
BGT(
 TEMP Compare.GT.x,
 TEMP Compare.GT.y,
 L.7, L.8)
LABEL L.8
MOVE(
 TEMP %rax,
 TEMP t.2)
JUMP(
 NAME L.6)
LABEL L.7
MOVE(
 TEMP t.2,
 CONST 1)
JUMP(
 NAME L.8)
LABEL L.6
# With procedure entry/exit:
MOVE(
 TEMP Compare.GT.x,
 TEMP %rdi)
MOVE(
 TEMP Compare.GT.y,
 TEMP %rsi)
LABEL L.16
MOVE(
 TEMP t.2,
 CONST 0)
BGT(
 TEMP Compare.GT.x,
 TEMP Compare.GT.y,
 L.7, L.8)
LABEL L.8
MOVE(
 TEMP %rax,
 TEMP t.2)
JUMP(
 NAME L.6)
LABEL L.7
MOVE(
 TEMP t.2,
 CONST 1)
JUMP(
 NAME L.8)
LABEL L.6
# Instructions:
	movq %rdi,Compare.GT.x	# Compare.GT.x := %rdi 
	movq %rsi,Compare.GT.y	# Compare.GT.y := %rsi 
L.16:	# <- 
	movabsq $0,t.8	# t.8 <- 
	movq t.8,t.2	# t.2 := t.8 
	cmpq Compare.GT.y,Compare.GT.x	# <- Compare.GT.x Compare.GT.y 
	jg L.7	# <- 
L.8:	# <- 
	movq t.2,%rax	# %rax := t.2 
	jmpq L.6	# <- : goto L.6 
L.7:	# <- 
	movabsq $1,t.9	# t.9 <- 
	movq t.9,t.2	# t.2 := t.9 
	jmpq L.8	# <- : goto L.8 
L.6:	# <- 
# Control Flow Graph:
0: Compare.GT.x Compare.GT.y <- %rdi %rsi ; goto 1 
1: t.8 t.2 <- Compare.GT.x Compare.GT.y ; goto 2 
2: %rax <- t.2 ; goto 4 
3: t.9 t.2 <- ; goto 2 
4: <- %rsp %rbp %rax ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
Compare.GT.x: Compare.GT.y %rsp %rbp %rsi t.2 t.8 
Compare.GT.y: Compare.GT.x %rsp %rbp t.2 t.8 
t.8: %rsp %rbp Compare.GT.x Compare.GT.y 
t.2: %rsp %rbp Compare.GT.x Compare.GT.y 
t.9: %rsp %rbp 
t.2 <= t.9
%rax <= t.2
t.2 <= t.8
Compare.GT.x <= %rdi
Compare.GT.y <= %rsi
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
Compare.GT.x->%rcx
Compare.GT.y->%rbx
t.8->%rax
t.2->%rax
t.9->%rax
# Assembly code:
	.text
Compare.GT:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
	movq %rdi,%rcx
	movq %rsi,%rbx
L.16:
	movabsq $0,%rax
#	movq %rax,%rax
	cmpq %rbx,%rcx
	jg L.7
L.8:
#	movq %rax,%rax
	jmpq L.6
L.7:
	movabsq $1,%rax
#	movq %rax,%rax
	jmpq L.8
L.6:
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
END Compare.GT
PROCEDURE Compare.GE
# Before canonicalization (trees):
MOVE(
 TEMP %rax,
 ESEQ(
  MOVE(
   TEMP t.3,
   CONST 0),
  BGE(
   TEMP Compare.GE.x,
   TEMP Compare.GE.y,
   L.10, L.11),
  LABEL L.10,
  MOVE(
   TEMP t.3,
   CONST 1),
  LABEL L.11,
  TEMP t.3)),
JUMP(
 NAME L.9),
LABEL L.9
# After canonicalization (trees):
MOVE(
 TEMP t.3,
 CONST 0)
BGE(
 TEMP Compare.GE.x,
 TEMP Compare.GE.y,
 L.10, L.11)
LABEL L.10
MOVE(
 TEMP t.3,
 CONST 1)
LABEL L.11
MOVE(
 TEMP %rax,
 TEMP t.3)
JUMP(
 NAME L.9)
LABEL L.9
# Basic Blocks:
LABEL L.17
MOVE(
 TEMP t.3,
 CONST 0)
BGE(
 TEMP Compare.GE.x,
 TEMP Compare.GE.y,
 L.10, L.11)
LABEL L.10
MOVE(
 TEMP t.3,
 CONST 1)
JUMP(
 NAME L.11)
LABEL L.11
MOVE(
 TEMP %rax,
 TEMP t.3)
JUMP(
 NAME L.9)
LABEL L.9
# Trace Scheduled:
LABEL L.17
MOVE(
 TEMP t.3,
 CONST 0)
BGE(
 TEMP Compare.GE.x,
 TEMP Compare.GE.y,
 L.10, L.11)
LABEL L.11
MOVE(
 TEMP %rax,
 TEMP t.3)
JUMP(
 NAME L.9)
LABEL L.10
MOVE(
 TEMP t.3,
 CONST 1)
JUMP(
 NAME L.11)
LABEL L.9
# With procedure entry/exit:
MOVE(
 TEMP Compare.GE.x,
 TEMP %rdi)
MOVE(
 TEMP Compare.GE.y,
 TEMP %rsi)
LABEL L.17
MOVE(
 TEMP t.3,
 CONST 0)
BGE(
 TEMP Compare.GE.x,
 TEMP Compare.GE.y,
 L.10, L.11)
LABEL L.11
MOVE(
 TEMP %rax,
 TEMP t.3)
JUMP(
 NAME L.9)
LABEL L.10
MOVE(
 TEMP t.3,
 CONST 1)
JUMP(
 NAME L.11)
LABEL L.9
# Instructions:
	movq %rdi,Compare.GE.x	# Compare.GE.x := %rdi 
	movq %rsi,Compare.GE.y	# Compare.GE.y := %rsi 
L.17:	# <- 
	movabsq $0,t.10	# t.10 <- 
	movq t.10,t.3	# t.3 := t.10 
	cmpq Compare.GE.y,Compare.GE.x	# <- Compare.GE.x Compare.GE.y 
	jge L.10	# <- 
L.11:	# <- 
	movq t.3,%rax	# %rax := t.3 
	jmpq L.9	# <- : goto L.9 
L.10:	# <- 
	movabsq $1,t.11	# t.11 <- 
	movq t.11,t.3	# t.3 := t.11 
	jmpq L.11	# <- : goto L.11 
L.9:	# <- 
# Control Flow Graph:
0: Compare.GE.x Compare.GE.y <- %rdi %rsi ; goto 1 
1: t.10 t.3 <- Compare.GE.x Compare.GE.y ; goto 2 
2: %rax <- t.3 ; goto 4 
3: t.11 t.3 <- ; goto 2 
4: <- %rsp %rbp %rax ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
Compare.GE.x: Compare.GE.y %rsp %rbp %rsi t.3 t.10 
Compare.GE.y: Compare.GE.x %rsp %rbp t.3 t.10 
t.10: %rsp %rbp Compare.GE.x Compare.GE.y 
t.3: %rsp %rbp Compare.GE.x Compare.GE.y 
t.11: %rsp %rbp 
t.3 <= t.11
%rax <= t.3
t.3 <= t.10
Compare.GE.x <= %rdi
Compare.GE.y <= %rsi
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
Compare.GE.x->%rcx
Compare.GE.y->%rbx
t.10->%rax
t.3->%rax
t.11->%rax
# Assembly code:
	.text
Compare.GE:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
	movq %rdi,%rcx
	movq %rsi,%rbx
L.17:
	movabsq $0,%rax
#	movq %rax,%rax
	cmpq %rbx,%rcx
	jge L.10
L.11:
#	movq %rax,%rax
	jmpq L.9
L.10:
	movabsq $1,%rax
#	movq %rax,%rax
	jmpq L.11
L.9:
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
END Compare.GE
PROCEDURE Compare
# With procedure entry/exit:
# Instructions:
# Control Flow Graph:
0: <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.text
Compare:
	pushq %rbp
	movq %rsp,%rbp
#	returnSink
	popq %rbp
	ret
END Compare
PROCEDURE main
# Before canonicalization (trees):
EXP(
 CALL(
  NAME Compare,
  CONST 0))
# After canonicalization (trees):
EXP(
 CALL(
  NAME Compare,
  CONST 0))
# Basic Blocks:
LABEL L.18
EXP(
 CALL(
  NAME Compare,
  CONST 0))
# Trace Scheduled:
LABEL L.18
EXP(
 CALL(
  NAME Compare,
  CONST 0))
# With procedure entry/exit:
LABEL L.18
EXP(
 CALL(
  NAME Compare,
  CONST 0))
# Instructions:
L.18:	# <- 
	call Compare	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- 
# Control Flow Graph:
0: %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.globl main
	.text
main:
	pushq %rbp
	movq %rsp,%rbp
L.18:
	call Compare
#	returnSink
	popq %rbp
	ret
END main
	.data
	.balign 8
L.12:	.asciz	"Attempt to use a null pointer"
PROCEDURE badPtr
# Before canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.12)),
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# After canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.12))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Basic Blocks:
LABEL L.19
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.12))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Trace Scheduled:
LABEL L.19
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.12))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# With procedure entry/exit:
LABEL L.19
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.12))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Instructions:
L.19:	# <- 
	leaq L.12(%rip),t.12	# t.12 <- 
	movq t.12,%rdi	# %rdi := t.12 
	call puts	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $1,t.13	# t.13 <- 
	movq t.13,%rdi	# %rdi := t.13 
	call exit	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
# Control Flow Graph:
0: t.12 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.13 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.12: %rsp %rbp 
t.13: %rsp %rbp 
%rdi <= t.12
%rdi <= t.13
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.12->%rax
t.13->%rax
# Assembly code:
	.text
badPtr:
	pushq %rbp
	movq %rsp,%rbp
L.19:
	leaq L.12(%rip),%rax
	movq %rax,%rdi
	call puts
	movabsq $1,%rax
	movq %rax,%rdi
	call exit
#	returnSink
	popq %rbp
	ret
END badPtr
	.data
	.balign 8
L.13:	.asciz	"Subscript out of bounds"
PROCEDURE badSub
# Before canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.13)),
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# After canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.13))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Basic Blocks:
LABEL L.20
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.13))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Trace Scheduled:
LABEL L.20
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.13))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# With procedure entry/exit:
LABEL L.20
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.13))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Instructions:
L.20:	# <- 
	leaq L.13(%rip),t.14	# t.14 <- 
	movq t.14,%rdi	# %rdi := t.14 
	call puts	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $1,t.15	# t.15 <- 
	movq t.15,%rdi	# %rdi := t.15 
	call exit	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
# Control Flow Graph:
0: t.14 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.15 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.14: %rsp %rbp 
t.15: %rsp %rbp 
%rdi <= t.14
%rdi <= t.15
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.14->%rax
t.15->%rax
# Assembly code:
	.text
badSub:
	pushq %rbp
	movq %rsp,%rbp
L.20:
	leaq L.13(%rip),%rax
	movq %rax,%rdi
	call puts
	movabsq $1,%rax
	movq %rax,%rdi
	call exit
#	returnSink
	popq %rbp
	ret
END badSub
