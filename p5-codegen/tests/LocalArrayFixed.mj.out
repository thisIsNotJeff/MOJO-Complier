PROCEDURE LocalArrayFixed
# Before canonicalization (trees):
MOVE(
 TEMP t.1,
 CONST 10),
MOVE(
 TEMP t.0,
 CONST 0),
BGE(
 TEMP t.0,
 TEMP t.1,
 L.1, L.0),
LABEL L.0,
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP t.0,
    CONST 8)), 
  CONST -80, 8),
 CONST 0),
MOVE(
 TEMP t.0,
 ADD(
  TEMP t.0,
  CONST 1)),
BLT(
 TEMP t.0,
 TEMP t.1,
 L.0, L.1),
LABEL L.1
# After canonicalization (trees):
MOVE(
 TEMP t.1,
 CONST 10)
MOVE(
 TEMP t.0,
 CONST 0)
BGE(
 TEMP t.0,
 TEMP t.1,
 L.1, L.0)
LABEL L.0
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP t.0,
    CONST 8)), 
  CONST -80, 8),
 CONST 0)
MOVE(
 TEMP t.0,
 ADD(
  TEMP t.0,
  CONST 1))
BLT(
 TEMP t.0,
 TEMP t.1,
 L.0, L.1)
LABEL L.1
# Basic Blocks:
LABEL L.4
MOVE(
 TEMP t.1,
 CONST 10)
MOVE(
 TEMP t.0,
 CONST 0)
BGE(
 TEMP t.0,
 TEMP t.1,
 L.1, L.0)
LABEL L.0
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP t.0,
    CONST 8)), 
  CONST -80, 8),
 CONST 0)
MOVE(
 TEMP t.0,
 ADD(
  TEMP t.0,
  CONST 1))
BLT(
 TEMP t.0,
 TEMP t.1,
 L.0, L.1)
LABEL L.1
# Trace Scheduled:
LABEL L.4
MOVE(
 TEMP t.1,
 CONST 10)
MOVE(
 TEMP t.0,
 CONST 0)
BGE(
 TEMP t.0,
 TEMP t.1,
 L.1, L.0)
LABEL L.0
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP t.0,
    CONST 8)), 
  CONST -80, 8),
 CONST 0)
MOVE(
 TEMP t.0,
 ADD(
  TEMP t.0,
  CONST 1))
BLT(
 TEMP t.0,
 TEMP t.1,
 L.0, L.1)
LABEL L.1
# With procedure entry/exit:
LABEL L.4
MOVE(
 TEMP t.1,
 CONST 10)
MOVE(
 TEMP t.0,
 CONST 0)
BGE(
 TEMP t.0,
 TEMP t.1,
 L.1, L.0)
LABEL L.0
MOVE(
 MEM(
  ADD(
   TEMP %rbp,
   MUL(
    TEMP t.0,
    CONST 8)), 
  CONST -80, 8),
 CONST 0)
MOVE(
 TEMP t.0,
 ADD(
  TEMP t.0,
  CONST 1))
BLT(
 TEMP t.0,
 TEMP t.1,
 L.0, L.1)
LABEL L.1
# Instructions:
L.4:	# <- 
	movq $10,t.1	# t.1 <- 
	xorq t.0,t.0	# t.0 <- 
	cmpq t.1,t.0	# <- t.0 t.1 
	jge L.1	# <- : goto L.1 L.0 
L.0:	# <- 
	movq %rbp,t.2	# t.2 := %rbp 
	movq t.0,t.3	# t.3 := t.0 
	shlq $3,t.3	# t.3 <- t.3 
	addq t.3,t.2	# t.2 <- t.3 t.2 
	movq $0,-80(t.2)	# <- t.2 
	movq t.0,t.4	# t.4 := t.0 
	addq $1,t.4	# t.4 <- t.4 
	movq t.4,t.0	# t.0 := t.4 
	cmpq t.1,t.0	# <- t.0 t.1 
	jl L.0	# <- : goto L.0 L.1 
L.1:	# <- 
# Control Flow Graph:
0: t.1 t.0 <- ; goto 2 1 
1: t.2 t.3 t.4 t.0 <- %rbp t.0 t.1 ; goto 1 2 
2: <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.1: t.0 %rsp %rbp t.4 t.2 t.3 
t.0: %rsp %rbp t.1 t.2 t.3 
t.2: %rbp t.1 %rsp t.0 t.3 
t.3: %rbp t.1 %rsp t.0 t.2 
t.4: %rbp t.1 %rsp 
t.2 <= %rbp
t.3 <= t.0
t.4 <= t.0
t.0 <= t.4
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.1->%rdx
t.0->%rcx
t.2->%rbx
t.3->%rax
t.4->%rax
# Assembly code:
	.text
LocalArrayFixed:
	pushq %rbp
	movq %rsp,%rbp
	subq $96,%rsp
	movq %rbx, -88(%rbp)
L.4:
	movq $10,%rdx
	xorq %rcx,%rcx
	cmpq %rdx,%rcx
	jge L.1
L.0:
	movq %rbp,%rbx
	movq %rcx,%rax
	shlq $3,%rax
	addq %rax,%rbx
	movq $0,-80(%rbx)
	movq %rcx,%rax
	addq $1,%rax
	movq %rax,%rcx
	cmpq %rdx,%rcx
	jl L.0
L.1:
#	returnSink
	movq -88(%rbp),%rbx
	addq $96,%rsp
	popq %rbp
	ret
END LocalArrayFixed
PROCEDURE main
# Before canonicalization (trees):
EXP(
 CALL(
  NAME LocalArrayFixed,
  CONST 0))
# After canonicalization (trees):
EXP(
 CALL(
  NAME LocalArrayFixed,
  CONST 0))
# Basic Blocks:
LABEL L.5
EXP(
 CALL(
  NAME LocalArrayFixed,
  CONST 0))
# Trace Scheduled:
LABEL L.5
EXP(
 CALL(
  NAME LocalArrayFixed,
  CONST 0))
# With procedure entry/exit:
LABEL L.5
EXP(
 CALL(
  NAME LocalArrayFixed,
  CONST 0))
# Instructions:
L.5:	# <- 
	call LocalArrayFixed	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- 
# Control Flow Graph:
0: %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.globl main
	.text
main:
	pushq %rbp
	movq %rsp,%rbp
L.5:
	call LocalArrayFixed
#	returnSink
	popq %rbp
	ret
END main
	.data
	.balign 8
L.2:	.asciz	"Attempt to use a null pointer"
PROCEDURE badPtr
# Before canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.2)),
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# After canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.2))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Basic Blocks:
LABEL L.6
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.2))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Trace Scheduled:
LABEL L.6
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.2))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# With procedure entry/exit:
LABEL L.6
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.2))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Instructions:
L.6:	# <- 
	leaq L.2(%rip),t.5	# t.5 <- 
	movq t.5,%rdi	# %rdi := t.5 
	call puts	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $1,t.6	# t.6 <- 
	movq t.6,%rdi	# %rdi := t.6 
	call exit	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
# Control Flow Graph:
0: t.5 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.6 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.5: %rsp %rbp 
t.6: %rsp %rbp 
%rdi <= t.5
%rdi <= t.6
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.5->%rax
t.6->%rax
# Assembly code:
	.text
badPtr:
	pushq %rbp
	movq %rsp,%rbp
L.6:
	leaq L.2(%rip),%rax
	movq %rax,%rdi
	call puts
	movabsq $1,%rax
	movq %rax,%rdi
	call exit
#	returnSink
	popq %rbp
	ret
END badPtr
	.data
	.balign 8
L.3:	.asciz	"Subscript out of bounds"
PROCEDURE badSub
# Before canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.3)),
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# After canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.3))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Basic Blocks:
LABEL L.7
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.3))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Trace Scheduled:
LABEL L.7
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.3))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# With procedure entry/exit:
LABEL L.7
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.3))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Instructions:
L.7:	# <- 
	leaq L.3(%rip),t.7	# t.7 <- 
	movq t.7,%rdi	# %rdi := t.7 
	call puts	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $1,t.8	# t.8 <- 
	movq t.8,%rdi	# %rdi := t.8 
	call exit	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
# Control Flow Graph:
0: t.7 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.8 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.7: %rsp %rbp 
t.8: %rsp %rbp 
%rdi <= t.7
%rdi <= t.8
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.7->%rax
t.8->%rax
# Assembly code:
	.text
badSub:
	pushq %rbp
	movq %rsp,%rbp
L.7:
	leaq L.3(%rip),%rax
	movq %rax,%rdi
	call puts
	movabsq $1,%rax
	movq %rax,%rdi
	call exit
#	returnSink
	popq %rbp
	ret
END badSub
