PROCEDURE BreakStmt
# Before canonicalization (trees):
MOVE(
 TEMP BreakStmt.1.x,
 CONST 0),
MOVE(
 TEMP BreakStmt.1.y,
 CONST 0),
JUMP(
 NAME L.0),
LABEL L.1,
JUMP(
 NAME L.2),
BEQ(
 TEMP BreakStmt.1.y,
 CONST 0,
 L.0, L.2),
LABEL L.0,
BEQ(
 TEMP BreakStmt.1.x,
 CONST 0,
 L.2, L.1),
LABEL L.2
# After canonicalization (trees):
MOVE(
 TEMP BreakStmt.1.x,
 CONST 0)
MOVE(
 TEMP BreakStmt.1.y,
 CONST 0)
JUMP(
 NAME L.0)
LABEL L.1
JUMP(
 NAME L.2)
BEQ(
 TEMP BreakStmt.1.y,
 CONST 0,
 L.0, L.2)
LABEL L.0
BEQ(
 TEMP BreakStmt.1.x,
 CONST 0,
 L.2, L.1)
LABEL L.2
# Basic Blocks:
LABEL L.5
MOVE(
 TEMP BreakStmt.1.x,
 CONST 0)
MOVE(
 TEMP BreakStmt.1.y,
 CONST 0)
JUMP(
 NAME L.0)
LABEL L.1
JUMP(
 NAME L.2)
LABEL L.6
BEQ(
 TEMP BreakStmt.1.y,
 CONST 0,
 L.0, L.2)
LABEL L.0
BEQ(
 TEMP BreakStmt.1.x,
 CONST 0,
 L.2, L.1)
LABEL L.2
# Trace Scheduled:
LABEL L.5
MOVE(
 TEMP BreakStmt.1.x,
 CONST 0)
MOVE(
 TEMP BreakStmt.1.y,
 CONST 0)
LABEL L.0
BEQ(
 TEMP BreakStmt.1.x,
 CONST 0,
 L.2, L.1)
LABEL L.1
JUMP(
 NAME L.2)
LABEL L.6
BEQ(
 TEMP BreakStmt.1.y,
 CONST 0,
 L.0, L.2)
LABEL L.2
# With procedure entry/exit:
LABEL L.5
MOVE(
 TEMP BreakStmt.1.x,
 CONST 0)
MOVE(
 TEMP BreakStmt.1.y,
 CONST 0)
LABEL L.0
BEQ(
 TEMP BreakStmt.1.x,
 CONST 0,
 L.2, L.1)
LABEL L.1
JUMP(
 NAME L.2)
LABEL L.6
BEQ(
 TEMP BreakStmt.1.y,
 CONST 0,
 L.0, L.2)
LABEL L.2
# Instructions:
L.5:	# <- 
	xorq BreakStmt.1.x,BreakStmt.1.x	# BreakStmt.1.x <- 
	xorq BreakStmt.1.y,BreakStmt.1.y	# BreakStmt.1.y <- 
L.0:	# <- 
	xorq t.0,t.0	# t.0 <- 
	cmpq t.0,BreakStmt.1.x	# <- BreakStmt.1.x t.0 
	je L.2	# <- : goto L.2 L.1 
L.1:	# <- 
	jmp L.2	# <- : goto L.2 
L.6:	# <- 
	xorq t.1,t.1	# t.1 <- 
	cmpq t.1,BreakStmt.1.y	# <- BreakStmt.1.y t.1 
	je L.0	# <- : goto L.0 L.2 
L.2:	# <- 
# Control Flow Graph:
0: BreakStmt.1.x BreakStmt.1.y <- ; goto 1 
1: t.0 <- BreakStmt.1.x ; goto 4 2 
2: <- ; goto 4 
3: t.1 <- BreakStmt.1.y ; goto 1 4 
4: <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
BreakStmt.1.x: BreakStmt.1.y %rsp %rbp t.0 t.1 
BreakStmt.1.y: BreakStmt.1.x %rsp %rbp t.1 
t.0: %rsp %rbp BreakStmt.1.x 
t.1: BreakStmt.1.x %rsp %rbp BreakStmt.1.y 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
BreakStmt.1.x->%rcx
BreakStmt.1.y->%rbx
t.0->%rax
t.1->%rax
# Assembly code:
	.text
BreakStmt:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rbx, -8(%rbp)
L.5:
	xorq %rcx,%rcx
	xorq %rbx,%rbx
L.0:
	xorq %rax,%rax
	cmpq %rax,%rcx
	je L.2
L.1:
	jmp L.2
L.6:
	xorq %rax,%rax
	cmpq %rax,%rbx
	je L.0
L.2:
#	returnSink
	movq -8(%rbp),%rbx
	addq $16,%rsp
	popq %rbp
	ret
END BreakStmt
PROCEDURE main
# Before canonicalization (trees):
EXP(
 CALL(
  NAME BreakStmt,
  CONST 0))
# After canonicalization (trees):
EXP(
 CALL(
  NAME BreakStmt,
  CONST 0))
# Basic Blocks:
LABEL L.7
EXP(
 CALL(
  NAME BreakStmt,
  CONST 0))
# Trace Scheduled:
LABEL L.7
EXP(
 CALL(
  NAME BreakStmt,
  CONST 0))
# With procedure entry/exit:
LABEL L.7
EXP(
 CALL(
  NAME BreakStmt,
  CONST 0))
# Instructions:
L.7:	# <- 
	call BreakStmt	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- 
# Control Flow Graph:
0: %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
# Assembly code:
	.globl main
	.text
main:
	pushq %rbp
	movq %rsp,%rbp
L.7:
	call BreakStmt
#	returnSink
	popq %rbp
	ret
END main
	.data
	.balign 8
L.3:	.asciz	"Attempt to use a null pointer"
PROCEDURE badPtr
# Before canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.3)),
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# After canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.3))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Basic Blocks:
LABEL L.8
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.3))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Trace Scheduled:
LABEL L.8
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.3))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# With procedure entry/exit:
LABEL L.8
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.3))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Instructions:
L.8:	# <- 
	leaq L.3(%rip),t.2	# t.2 <- 
	movq t.2,%rdi	# %rdi := t.2 
	call puts	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $1,t.3	# t.3 <- 
	movq t.3,%rdi	# %rdi := t.3 
	call exit	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
# Control Flow Graph:
0: t.2 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.3 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.2: %rsp %rbp 
t.3: %rsp %rbp 
%rdi <= t.2
%rdi <= t.3
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.2->%rax
t.3->%rax
# Assembly code:
	.text
badPtr:
	pushq %rbp
	movq %rsp,%rbp
L.8:
	leaq L.3(%rip),%rax
	movq %rax,%rdi
	call puts
	movabsq $1,%rax
	movq %rax,%rdi
	call exit
#	returnSink
	popq %rbp
	ret
END badPtr
	.data
	.balign 8
L.4:	.asciz	"Subscript out of bounds"
PROCEDURE badSub
# Before canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.4)),
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# After canonicalization (trees):
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.4))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Basic Blocks:
LABEL L.9
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.4))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Trace Scheduled:
LABEL L.9
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.4))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# With procedure entry/exit:
LABEL L.9
EXP(
 CALL(
  NAME puts,
  CONST 0,
  NAME L.4))
EXP(
 CALL(
  NAME exit,
  CONST 0,
  CONST 1))
# Instructions:
L.9:	# <- 
	leaq L.4(%rip),t.4	# t.4 <- 
	movq t.4,%rdi	# %rdi := t.4 
	call puts	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
	movabsq $1,t.5	# t.5 <- 
	movq t.5,%rdi	# %rdi := t.5 
	call exit	# %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 <- %rdi 
# Control Flow Graph:
0: t.4 %rdi %rsi %rdx %rcx %r8 %r9 %rax %r10 %r11 t.5 <- %rsp %rbp ; goto 
# Interference Graph:
%rax: 
%rbx: 
%rcx: 
%rdx: 
%rsp: 
%rbp: 
%rsi: 
%rdi: 
%r8: 
%r9: 
%r10: 
%r11: 
%r12: 
%r13: 
%r14: 
%r15: 
t.4: %rsp %rbp 
t.5: %rsp %rbp 
%rdi <= t.4
%rdi <= t.5
# Register Allocation:
%rax->%rax
%rbx->%rbx
%rcx->%rcx
%rdx->%rdx
%rsp->%rsp
%rbp->%rbp
%rsi->%rsi
%rdi->%rdi
%r8->%r8
%r9->%r9
%r10->%r10
%r11->%r11
%r12->%r12
%r13->%r13
%r14->%r14
%r15->%r15
t.4->%rax
t.5->%rax
# Assembly code:
	.text
badSub:
	pushq %rbp
	movq %rsp,%rbp
L.9:
	leaq L.4(%rip),%rax
	movq %rax,%rdi
	call puts
	movabsq $1,%rax
	movq %rax,%rdi
	call exit
#	returnSink
	popq %rbp
	ret
END badSub
